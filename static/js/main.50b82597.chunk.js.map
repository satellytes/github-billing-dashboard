{"version":3,"sources":["global-styles.tsx","components/file-input/file-input.tsx","group-entries.ts","components/billing-chart/billing-chart-components.tsx","date-util.ts","components/billing-chart/billing-bar-chart.tsx","components/billing-chart/billing-line-chart.tsx","components/context/widget-context.tsx","components/chart-container/chart-container.tsx","components/monthly-widget/monthly-widget.tsx","components/monthly-widget-container/monthly-widget-container.tsx","components/headline/headline.tsx","components/start-screen/rectangle.svg","components/start-screen/start-screen.tsx","App.tsx","csv-reader.ts","index.tsx"],"names":["GlobalStyles","createGlobalStyle","Title","styled","h2","Description","p","StyledFileInput","div","FileInput","onInput","history","useHistory","onDrop","useCallback","acceptedFiles","length","push","useDropzone","accept","getRootProps","getInputProps","isDragActive","groupEntriesPerDay","csvData","reduce","acc","obj","indexOfEntryForCurrentDate","currentDate","Date","date","toISOString","find","objectsInAcc","index","day","entries","totalPrice","newEntry","groupEntriesPerWeek","isDataFromWidget","currentFirstDayOfTheWeek","startOfWeek","from","firstDayOfTheWeek","lastDayOfTheWeek","lastDayOfWeek","firstDayOfTheWeekRange","lastDayOfTheWeekRange","isSameMonth","startOfMonth","lastDayOfMonth","week","lightFormat","to","weekNumber","getISOWeek","getPriceByRepositoryName","repositoryName","currentEntries","priceByRepositoryName","forEach","entry","repositorySlug","Math","round","getMaximumTotalPriceOfAllDays","data","entriesGroupedPerDay","ceil","max","map","CustomTooltip","Tooltip","tooltipLabelStyle","color","fontStyle","fontWeight","fontSize","lineHeight","marginBottom","tooltipItemStyle","tooltipContentStyle","borderRadius","borderBlockColor","colors","getPeriodOfTimeString","isStringDateValue","possibleDateValue","parse","BillingBarChart","groupedBy","maxValueOfYAxis","repositoryNames","entriesGroupedPerWeek","ResponsiveContainer","width","height","BarChart","CartesianGrid","vertical","stroke","XAxis","dataKey","axisLine","tickLine","tick","fill","tickFormatter","interval","YAxis","domain","unit","tickCount","labelFormatter","label","itemSorter","repositoryGroupedByDay","value","labelStyle","itemStyle","contentStyle","cursor","Legend","Bar","currentEntry","stackId","name","BillingLineChart","LineChart","Line","type","strokeWidth","dot","WidgetContext","createContext","activeMonth","monthName","setActiveMonth","ChartDiv","ButtonDiv","Button","button","props","isActive","LeftToggleButton","RightToggleButton","ChartContainer","useState","diagramType","setDiagramType","setGroupedBy","useContext","maxDailyValueOfYAxis","maxWeeklyValueOfYAxis","getMaximumTotalPriceOfAllWeeks","currentMaxValueOfYAxis","currentData","repositoryNamesWithDuplicates","filter","indexOf","onClick","StyledWidget","WidgetDescription","WidgetMonth","WidgetValue","Arrow","span","isMoreExpensiveThanPreviousMonth","MonthlyWidget","monthlyEntry","differenceToPreviousMonth","formattedDifferenceToPreviousMonth","arrowSymbol","hide","totalPriceOfPreviousMonth","StyledContainer","MonthlyWidgetContainer","entriesGroupedPerMonth","currentStartOfMonth","firstDayOfMonth","lastDayOfTheMonth","format","getYear","month","getMonth","groupEntriesPerMonth","className","StyledHeadline","h1","Headline","IntroductionSentence","Explanation","FlowChart","FlowChartRectangle","FlowChartRectangleSVG","img","InnerFlowChartDiv","FlowChartHeadline","FlowChartDescription","StartScreen","src","rectangleSVG","MainContent","App","setCsvData","selectedMonthFromWidget","setSelectedMonthFromWidget","Provider","handleWidgetClick","path","file","Promise","resolve","header","skipEmptyLines","transformHeader","toLowerCase","replace","m","chr","toUpperCase","complete","result","githubBillingEntries","dailyEntry","price","pricePerUnit","substring","parseFloat","quantity","getCsvFile","then","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50b82597.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body {\n\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: #202840;\n    color: #FFF;\n  }\n`;\n","import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface FileInputProp {\n  onInput: (file: File) => void;\n}\n\nconst Title = styled.h2`\n  font-style: normal;\n  font-weight: bold;\n  font-size: 32px;\n  line-height: 110%;\n`;\n\nconst Description = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  line-height: 150%;\n  width: 66%;\n`;\n\nconst StyledFileInput = styled.div`\n  background: rgba(122, 143, 204, 0.3);\n  border: 1px solid rgba(122, 143, 204, 0.3);\n  border-radius: 4px;\n  padding: 30px 0;\n  text-align: center;\n  cursor: pointer;\n\n  &:hover {\n    border-color: white;\n  }\n`;\n\nexport const FileInput = ({ onInput }: FileInputProp): JSX.Element => {\n  const history = useHistory();\n\n  const onDrop = useCallback((acceptedFiles) => {\n    if (acceptedFiles.length > 0) {\n      onInput(acceptedFiles[0]);\n      history.push(\"/acitve\");\n    }\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: \".csv\",\n  });\n\n  return (\n    <>\n      <Title>Github Report Usage UI</Title>\n      <Description>\n        Integer posuere erat a ante venenatis dapibus posuere velit aliquet.\n        Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Maecenas\n        sed diam eget risus varius blandit sit amet non magna.\n      </Description>\n      <StyledFileInput {...getRootProps()}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the file here ...</p>\n        ) : (\n          <p>Drop a csv file here, or click to select a file</p>\n        )}\n      </StyledFileInput>\n    </>\n  );\n};\n","import { UsageReportEntry } from \"./csv-reader\";\nimport {\n  getISOWeek,\n  lastDayOfWeek,\n  lightFormat,\n  startOfWeek,\n  format,\n  getMonth,\n  lastDayOfMonth,\n  startOfMonth,\n  getYear,\n  isSameMonth,\n} from \"date-fns\";\n\nexport interface UsageReportDay {\n  day: string; // iso date\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerDay = (\n  csvData: UsageReportEntry[]\n): UsageReportDay[] => {\n  return csvData.reduce((acc: UsageReportDay[], obj) => {\n    let indexOfEntryForCurrentDate = 0;\n    const currentDate = new Date(obj.date).toISOString();\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportDay, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.day === currentDate;\n      })\n    ) {\n      const newEntry: UsageReportDay = {\n        day: currentDate,\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\nexport interface UsageReportWeek {\n  week: string; // a.e.: \"12.5. - 19.5.\"\n  from: string; // iso date\n  to: string; // iso date\n  weekNumber: number;\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerWeek = (\n  csvData: UsageReportEntry[],\n  isDataFromWidget: boolean\n): UsageReportWeek[] => {\n  return csvData.reduce((acc: UsageReportWeek[], obj) => {\n    let indexOfEntryForCurrentDate = 0;\n    const currentDate = new Date(obj.date);\n    const currentFirstDayOfTheWeek = startOfWeek(currentDate);\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportWeek, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.from === currentFirstDayOfTheWeek.toISOString();\n      })\n    ) {\n      const firstDayOfTheWeek = startOfWeek(currentDate);\n      const lastDayOfTheWeek = lastDayOfWeek(currentDate);\n\n      let firstDayOfTheWeekRange = startOfWeek(currentDate);\n      let lastDayOfTheWeekRange = lastDayOfWeek(currentDate);\n\n      if (isDataFromWidget) {\n        if (!isSameMonth(firstDayOfTheWeek, currentDate)) {\n          firstDayOfTheWeekRange = startOfMonth(currentDate);\n        }\n        if (!isSameMonth(lastDayOfTheWeek, currentDate)) {\n          lastDayOfTheWeekRange = lastDayOfMonth(currentDate);\n        }\n      }\n\n      const newEntry: UsageReportWeek = {\n        week: `${lightFormat(firstDayOfTheWeekRange, \"dd.MM.\")} - ${lightFormat(\n          lastDayOfTheWeekRange,\n          \"dd.MM.\"\n        )}`,\n        from: firstDayOfTheWeek.toISOString(),\n        to: lastDayOfTheWeek.toISOString(),\n        weekNumber: getISOWeek(currentDate),\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\nexport interface UsageReportMonth {\n  monthName: string; // a.e.: \"April 2020\"\n  month: number; // a.e. 4\n  from: string; // iso date\n  to: string; // iso date\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerMonth = (\n  csvData: UsageReportEntry[]\n): UsageReportMonth[] => {\n  return csvData.reduce((acc: UsageReportMonth[], obj) => {\n    let indexOfEntryForCurrentDate = 0;\n    const currentDate = new Date(obj.date);\n    const currentStartOfMonth = startOfMonth(currentDate).toISOString();\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportMonth, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.from === currentStartOfMonth;\n      })\n    ) {\n      const firstDayOfMonth = startOfMonth(currentDate);\n      const lastDayOfTheMonth = lastDayOfMonth(currentDate);\n\n      const newEntry: UsageReportMonth = {\n        monthName: `${format(currentDate, \"LLLL\")} ${getYear(currentDate)}`,\n        month: getMonth(currentDate) + 1,\n        from: firstDayOfMonth.toISOString(),\n        to: lastDayOfTheMonth.toISOString(),\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\nexport const getPriceByRepositoryName = (\n  repositoryName: string,\n  currentEntries: UsageReportEntry[]\n): number => {\n  let priceByRepositoryName = 0;\n  currentEntries.forEach((entry) => {\n    if (entry.repositorySlug === repositoryName) {\n      priceByRepositoryName += entry.totalPrice;\n    }\n  });\n  return Math.round(priceByRepositoryName * 100) / 100;\n};\n\nexport const getMaximumTotalPriceOfAllDays = (\n  data: UsageReportEntry[]\n): number => {\n  const entriesGroupedPerDay = groupEntriesPerDay(data);\n  return Math.ceil(\n    Math.max(...entriesGroupedPerDay.map((entry) => entry.totalPrice))\n  );\n};\n\nexport const getMaximumTotalPriceOfAllWeeks = (\n  data: UsageReportEntry[]\n): number => {\n  const entriesGroupedPerWeek = groupEntriesPerWeek(data, false);\n  return Math.ceil(\n    Math.max(...entriesGroupedPerWeek.map((entry) => entry.totalPrice))\n  );\n};\n","import { Tooltip } from \"recharts\";\nimport { CSSProperties } from \"react\";\nimport { UsageReportDay, UsageReportWeek } from \"../../group-entries\";\n\nexport interface BillingChartProps {\n  groupedBy: \"daily\" | \"weekly\";\n  maxValueOfYAxis: number;\n  repositoryNames: string[];\n  entriesGroupedPerDay: UsageReportDay[];\n  entriesGroupedPerWeek: UsageReportWeek[];\n}\n\n//Setting the generics for Tooltip\nexport class CustomTooltip extends Tooltip<number, string> {}\n\nexport const tooltipLabelStyle: CSSProperties = {\n  color: \"black\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\",\n  fontSize: \"12px\",\n  lineHeight: \"110%\",\n  marginBottom: \"4px\",\n};\n\nexport const tooltipItemStyle: CSSProperties = {\n  fontStyle: \"normal\",\n  fontWeight: \"normal\",\n  fontSize: \"12px\",\n  lineHeight: \"110%\",\n};\n\nexport const tooltipContentStyle: CSSProperties = {\n  borderRadius: \"4px\",\n  borderBlockColor: \"white\",\n};\n\nexport const colors = [\n  \"#233666\",\n  \"#96ADEA\",\n  \"#4F79E6\",\n  \"#414C66\",\n  \"#3D5EB3\",\n  \"#233666\",\n  \"#96ADEA\",\n  \"#4F79E6\",\n  \"#414C66\",\n  \"#3D5EB3\",\n];\n","import { lightFormat } from \"date-fns\";\nimport { UsageReportEntry } from \"./csv-reader\";\n\nexport const getPeriodOfTimeString = (csvData: UsageReportEntry[]): string => {\n  return `${lightFormat(\n    new Date(csvData[0].date),\n    \"dd.MM.yyyy\"\n  )} bis ${lightFormat(\n    new Date(csvData[csvData.length - 1].date),\n    \"dd.MM.yyyy\"\n  )}`;\n};\n\nexport const isStringDateValue = (possibleDateValue: string): boolean => {\n  return !!Date.parse(possibleDateValue);\n};\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { getPriceByRepositoryName } from \"../../group-entries\";\nimport { lightFormat } from \"date-fns\";\nimport {\n  BillingChartProps,\n  colors,\n  CustomTooltip,\n  tooltipContentStyle,\n  tooltipItemStyle,\n  tooltipLabelStyle,\n} from \"./billing-chart-components\";\nimport { isStringDateValue } from \"../../date-util\";\n\nexport const BillingBarChart = ({\n  groupedBy,\n  maxValueOfYAxis,\n  repositoryNames,\n  entriesGroupedPerDay,\n  entriesGroupedPerWeek,\n}: BillingChartProps): JSX.Element => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={600}>\n      <BarChart\n        data={\n          groupedBy === \"daily\" ? entriesGroupedPerDay : entriesGroupedPerWeek\n        }\n      >\n        <CartesianGrid vertical={false} stroke={\"rgba(255, 255, 255, 0.1)\"} />\n        <XAxis\n          dataKey={groupedBy === \"daily\" ? \"day\" : \"week\"}\n          axisLine={false}\n          tickLine={false}\n          tick={{ fill: \"white\" }}\n          tickFormatter={(tick) =>\n            isStringDateValue(tick)\n              ? lightFormat(new Date(tick), \"dd.MM.\")\n              : tick\n          }\n          interval=\"preserveStart\"\n        />\n        <YAxis\n          domain={[0, maxValueOfYAxis]}\n          unit=\" $\"\n          tickCount={maxValueOfYAxis + 1}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n\n        <CustomTooltip\n          labelFormatter={(label) =>\n            isStringDateValue(label)\n              ? lightFormat(new Date(label), \"dd.MM.\")\n              : label\n          }\n          itemSorter={(repositoryGroupedByDay) =>\n            repositoryGroupedByDay.value ? repositoryGroupedByDay.value * -1 : 0\n          }\n          labelStyle={tooltipLabelStyle}\n          itemStyle={tooltipItemStyle}\n          contentStyle={tooltipContentStyle}\n          cursor={{ fill: \"rgba(122, 143, 204, 0.3)\" }}\n        />\n        <Legend />\n        {repositoryNames.map((repositoryName, index) => {\n          return (\n            <Bar\n              dataKey={(currentEntry) =>\n                getPriceByRepositoryName(repositoryName, currentEntry.entries)\n              }\n              stackId=\"a\"\n              fill={colors[index]}\n              key={index}\n              name={repositoryName}\n              unit={\"$\"}\n            />\n          );\n        })}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n","import React from \"react\";\nimport {\n  BillingChartProps,\n  colors,\n  CustomTooltip,\n  tooltipContentStyle,\n  tooltipItemStyle,\n  tooltipLabelStyle,\n} from \"./billing-chart-components\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Legend,\n  ResponsiveContainer,\n  CartesianGrid,\n} from \"recharts\";\nimport { getPriceByRepositoryName } from \"../../group-entries\";\nimport { lightFormat } from \"date-fns\";\nimport { isStringDateValue } from \"../../date-util\";\n\nexport const BillingLineChart = ({\n  groupedBy,\n  maxValueOfYAxis,\n  repositoryNames,\n  entriesGroupedPerDay,\n  entriesGroupedPerWeek,\n}: BillingChartProps): JSX.Element => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={600}>\n      <LineChart\n        data={\n          groupedBy === \"daily\" ? entriesGroupedPerDay : entriesGroupedPerWeek\n        }\n      >\n        <CartesianGrid stroke={\"rgba(255, 255, 255, 0.1)\"} />\n        <XAxis\n          dataKey={groupedBy === \"daily\" ? \"day\" : \"week\"}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(tick) =>\n            isStringDateValue(tick)\n              ? lightFormat(new Date(tick), \"dd.MM.\")\n              : tick\n          }\n          interval=\"preserveStart\"\n        />\n        <YAxis\n          domain={[0, maxValueOfYAxis]}\n          unit=\" $\"\n          tickCount={maxValueOfYAxis + 1}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n\n        <CustomTooltip\n          labelFormatter={(label) =>\n            isStringDateValue(label)\n              ? lightFormat(new Date(label), \"dd.MM.\")\n              : label\n          }\n          itemSorter={(repositoryGroupedByDay) =>\n            repositoryGroupedByDay.value ? repositoryGroupedByDay.value * -1 : 0\n          }\n          labelStyle={tooltipLabelStyle}\n          itemStyle={tooltipItemStyle}\n          contentStyle={tooltipContentStyle}\n        />\n        <Legend />\n        {repositoryNames.map((repositoryName, index) => {\n          return (\n            <Line\n              type=\"monotone\"\n              stroke={colors[index]}\n              dataKey={(currentEntry) =>\n                getPriceByRepositoryName(repositoryName, currentEntry.entries)\n              }\n              key={index}\n              name={repositoryName}\n              unit={\"$\"}\n              strokeWidth={4}\n              dot={false}\n            />\n          );\n        })}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n","import { createContext } from \"react\";\nimport { UsageReportEntry } from \"../../csv-reader\";\n\ninterface WidgetContextType {\n  activeMonth: { monthName: string; data: UsageReportEntry[] };\n  setActiveMonth: (month: string, data: UsageReportEntry[]) => void;\n}\n\nexport const WidgetContext = createContext<WidgetContextType>({\n  activeMonth: { monthName: \"\", data: [] },\n  setActiveMonth: () => undefined,\n});\n","import React, { useContext, useState } from \"react\";\nimport { UsageReportEntry } from \"../../csv-reader\";\nimport { BillingBarChart } from \"../billing-chart/billing-bar-chart\";\nimport { BillingLineChart } from \"../billing-chart/billing-line-chart\";\nimport { WidgetContext } from \"../context/widget-context\";\nimport {\n  getMaximumTotalPriceOfAllDays,\n  getMaximumTotalPriceOfAllWeeks,\n  groupEntriesPerDay,\n  groupEntriesPerWeek,\n} from \"../../group-entries\";\nimport { getPeriodOfTimeString } from \"../../date-util\";\nimport styled from \"styled-components\";\n\ninterface ChartContainerProps {\n  csvData: UsageReportEntry[];\n}\n\nconst ChartDiv = styled.div`\n  background: linear-gradient(\n    180deg,\n    rgba(122, 143, 204, 0) 0%,\n    rgba(122, 143, 204, 0.3) 100%\n  );\n  border-radius: 4px;\n  margin: 32px 16px;\n`;\n\nconst ButtonDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 8px;\n`;\n\nconst Button = styled.button`\n  background: ${(props: { isActive: boolean }) =>\n    props.isActive ? \"#668cff\" : \"rgba(255, 255, 255, 0.1)\"};\n  border: none;\n  cursor: pointer;\n  padding: 4px 8px;\n  color: white;\n`;\n\nconst LeftToggleButton = styled(Button)`\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n`;\n\nconst RightToggleButton = styled(Button)`\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n`;\n\nexport const ChartContainer = ({\n  csvData,\n}: ChartContainerProps): JSX.Element => {\n  const [diagramType, setDiagramType] = useState<\"Bar\" | \"Line\">(\"Bar\");\n  const [groupedBy, setGroupedBy] = useState<\"daily\" | \"weekly\">(\"daily\");\n\n  // Selected month from mini-widgets\n  const { activeMonth } = useContext(WidgetContext);\n\n  const maxDailyValueOfYAxis = getMaximumTotalPriceOfAllDays(csvData);\n  const maxWeeklyValueOfYAxis = getMaximumTotalPriceOfAllWeeks(csvData);\n  const currentMaxValueOfYAxis =\n    groupedBy === \"daily\" ? maxDailyValueOfYAxis : maxWeeklyValueOfYAxis;\n\n  //currentData changes when a mini-widget is selected\n  const isDataFromWidget = !(activeMonth.monthName === \"\");\n  const currentData = isDataFromWidget ? activeMonth.data : csvData;\n\n  const entriesGroupedPerDay = groupEntriesPerDay(currentData);\n  const entriesGroupedPerWeek = groupEntriesPerWeek(\n    currentData,\n    isDataFromWidget\n  );\n\n  const repositoryNames = (): string[] => {\n    const repositoryNamesWithDuplicates = csvData.map(\n      (entry) => entry.repositorySlug\n    );\n    return repositoryNamesWithDuplicates.filter(\n      (value, index) => repositoryNamesWithDuplicates.indexOf(value) === index\n    );\n  };\n\n  return (\n    <>\n      <h2>Angezeigter Zeitraum</h2>\n      <p>{activeMonth.monthName || getPeriodOfTimeString(csvData)}</p>\n      <ChartDiv>\n        <ButtonDiv>\n          <div>\n            <LeftToggleButton\n              isActive={groupedBy === \"daily\"}\n              onClick={() => setGroupedBy(\"daily\")}\n            >\n              Daily\n            </LeftToggleButton>\n            <RightToggleButton\n              isActive={groupedBy === \"weekly\"}\n              onClick={() => setGroupedBy(\"weekly\")}\n            >\n              Weekly\n            </RightToggleButton>\n          </div>\n\n          <div>\n            <LeftToggleButton\n              isActive={diagramType === \"Bar\"}\n              onClick={() => setDiagramType(\"Bar\")}\n            >\n              Bar\n            </LeftToggleButton>\n            <RightToggleButton\n              isActive={diagramType === \"Line\"}\n              onClick={() => setDiagramType(\"Line\")}\n            >\n              Line\n            </RightToggleButton>\n          </div>\n        </ButtonDiv>\n        {diagramType === \"Bar\" ? (\n          <BillingBarChart\n            maxValueOfYAxis={currentMaxValueOfYAxis}\n            groupedBy={groupedBy}\n            repositoryNames={repositoryNames()}\n            entriesGroupedPerDay={entriesGroupedPerDay}\n            entriesGroupedPerWeek={entriesGroupedPerWeek}\n          />\n        ) : (\n          <BillingLineChart\n            maxValueOfYAxis={currentMaxValueOfYAxis}\n            groupedBy={groupedBy}\n            repositoryNames={repositoryNames()}\n            entriesGroupedPerDay={entriesGroupedPerDay}\n            entriesGroupedPerWeek={entriesGroupedPerWeek}\n          />\n        )}\n      </ChartDiv>\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { UsageReportMonth } from \"../../group-entries\";\nimport { LineChart, Line, YAxis } from \"recharts\";\nimport { groupEntriesPerDay } from \"../../group-entries\";\nimport { WidgetContext } from \"../context/widget-context\";\nimport styled from \"styled-components\";\n\ninterface MonthlyWidgetProps {\n  monthlyEntry: UsageReportMonth;\n  maxValueOfYAxis: number;\n  isMoreExpensiveThanPreviousMonth: boolean;\n  differenceToPreviousMonth: number;\n}\n\nconst StyledWidget = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-right: 10px;\n  cursor: pointer;\n  background: rgba(122, 143, 204, 0.3);\n  min-width: 220px;\n  border: ${(props: { isActive: boolean }) =>\n    props.isActive ? \"1px solid white\" : \"1px solid rgba(122, 143, 204, 0.3)\"};\n  padding: 8px 4px;\n  border-radius: 4px;\n\n  &:hover {\n    border-color: white;\n  }\n\n  @media (max-width: 576px) {\n    margin-bottom: 4px;\n  }\n`;\n\nconst WidgetDescription = styled.div`\n  margin-right: 8px;\n`;\n\nconst WidgetMonth = styled.h2`\n  margin-top: 0;\n  font-style: normal;\n  font-weight: 900;\n  font-size: 12px;\n  line-height: 150%;\n  text-transform: uppercase;\n`;\n\nconst WidgetValue = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 14px;\n  margin: 0;\n  text-transform: uppercase;\n`;\n\nconst Arrow = styled.span`\n  color: ${(props: { isMoreExpensiveThanPreviousMonth: boolean }) =>\n    props.isMoreExpensiveThanPreviousMonth ? \"#DC052D\" : \"#75F0C7\"};\n`;\n\nexport const MonthlyWidget = ({\n  monthlyEntry,\n  maxValueOfYAxis,\n  isMoreExpensiveThanPreviousMonth,\n  differenceToPreviousMonth,\n}: MonthlyWidgetProps): JSX.Element => {\n  const { activeMonth, setActiveMonth } = useContext(WidgetContext);\n  const entriesGroupedPerDay = groupEntriesPerDay(monthlyEntry.entries);\n  const formattedDifferenceToPreviousMonth = `${\n    differenceToPreviousMonth >= 0 ? \"+\" : \"\"\n  }${Math.round(differenceToPreviousMonth * 100) / 100} $`;\n  //\"\\u2191\" = Arrow-Up-Symbol, \"\\u2193\" = Arrow-Down-Symbol\n  const arrowSymbol = isMoreExpensiveThanPreviousMonth ? \" \\u2191\" : \" \\u2193\";\n\n  return (\n    <StyledWidget\n      isActive={activeMonth.monthName === monthlyEntry.monthName}\n      onClick={() =>\n        setActiveMonth(monthlyEntry.monthName, monthlyEntry.entries)\n      }\n    >\n      <WidgetDescription>\n        <WidgetMonth>{monthlyEntry.monthName}</WidgetMonth>\n        <WidgetValue>{`${\n          Math.round(monthlyEntry.totalPrice * 100) / 100\n        } $`}</WidgetValue>\n        <WidgetValue>\n          {formattedDifferenceToPreviousMonth}\n          <Arrow\n            isMoreExpensiveThanPreviousMonth={isMoreExpensiveThanPreviousMonth}\n          >\n            {arrowSymbol}\n          </Arrow>\n        </WidgetValue>\n      </WidgetDescription>\n      <LineChart\n        width={100}\n        height={50}\n        data={entriesGroupedPerDay}\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        //@ts-ignore\n        cursor=\"pointer\"\n      >\n        <YAxis hide={true} domain={[0, maxValueOfYAxis]} />\n        <Line\n          type=\"monotone\"\n          dataKey=\"totalPrice\"\n          stroke={isMoreExpensiveThanPreviousMonth ? \"#DC052D\" : \"#75F0C7\"}\n          dot={false}\n        />\n      </LineChart>\n    </StyledWidget>\n  );\n};\n","import React from \"react\";\nimport { UsageReportEntry } from \"../../csv-reader\";\nimport { MonthlyWidget } from \"../monthly-widget/monthly-widget\";\nimport {\n  getMaximumTotalPriceOfAllDays,\n  groupEntriesPerMonth,\n} from \"../../group-entries\";\nimport styled from \"styled-components\";\n\ninterface MonthlyWidgetProps {\n  csvData: UsageReportEntry[];\n}\n\nlet totalPriceOfPreviousMonth = 0;\n\nconst StyledContainer = styled.div`\n  display: flex;\n  margin-bottom: 96px;\n  overflow: auto;\n  @media (max-width: 576px) {\n    flex-direction: column;\n  }\n`;\n\nexport const MonthlyWidgetContainer = ({\n  csvData,\n}: MonthlyWidgetProps): JSX.Element => {\n  const maxValueOfYAxis = getMaximumTotalPriceOfAllDays(csvData);\n  const entriesGroupedPerMonth = groupEntriesPerMonth(csvData);\n\n  return (\n    <StyledContainer className={\"widget-container\"}>\n      {entriesGroupedPerMonth.map((monthlyEntry, index) => {\n        let isMoreExpensiveThanPreviousMonth = true;\n        if (\n          index === 0 ||\n          totalPriceOfPreviousMonth > monthlyEntry.totalPrice\n        ) {\n          isMoreExpensiveThanPreviousMonth = false;\n        }\n\n        const differenceToPreviousMonth =\n          index === 0 ? 0 : monthlyEntry.totalPrice - totalPriceOfPreviousMonth;\n        totalPriceOfPreviousMonth = monthlyEntry.totalPrice;\n\n        return (\n          <MonthlyWidget\n            key={monthlyEntry.month}\n            monthlyEntry={monthlyEntry}\n            maxValueOfYAxis={maxValueOfYAxis}\n            isMoreExpensiveThanPreviousMonth={isMoreExpensiveThanPreviousMonth}\n            differenceToPreviousMonth={differenceToPreviousMonth}\n          />\n        );\n      })}\n    </StyledContainer>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledHeadline = styled.h1`\n  font-style: normal;\n  font-weight: bold;\n  font-size: 72px;\n  line-height: 110%;\n`;\n\nexport const Headline = (): JSX.Element => {\n  return (\n    <>\n      {/*TODO: Add satellytes symbol*/}\n      <StyledHeadline>GitHub Report</StyledHeadline>\n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/rectangle.760bdabe.svg\";","import React from \"react\";\nimport rectangleSVG from \"./rectangle.svg\";\nimport styled from \"styled-components\";\n\nconst IntroductionSentence = styled.h2`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 32px;\n  line-height: 110%;\n  width: 66%;\n  @media (max-width: 576px) {\n    width: 100%;\n  }\n`;\n\nconst Explanation = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  line-height: 150%;\n  width: 66%;\n\n  @media (max-width: 576px) {\n    width: 100%;\n  }\n`;\n\nconst FlowChart = styled.div`\n  display: flex;\n\n  @media (max-width: 576px) {\n    flex-direction: column;\n  }\n`;\n\nconst FlowChartRectangle = styled.div`\n  margin-right: 8px;\n  padding: 0;\n  @media (max-width: 576px) {\n    width: 80%;\n  }\n`;\n\nconst FlowChartRectangleSVG = styled.img`\n  width: 100%;\n`;\n\nconst InnerFlowChartDiv = styled.div`\n  position: absolute;\n  padding: 8px;\n  width: 22%;\n\n  @media (max-width: 576px) {\n    width: 70%;\n  }\n`;\n\nconst FlowChartHeadline = styled.h1`\n  margin: 0;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 32px;\n  line-height: 110%;\n`;\n\nconst FlowChartDescription = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 14px;\n  line-height: 150%;\n`;\n\nexport const StartScreen = (): JSX.Element => {\n  return (\n    <>\n      <IntroductionSentence>\n        Hier ein kurzer Einführungssatz zum Tool integer posuere erat a ante\n        venenatis\n      </IntroductionSentence>\n      <Explanation>\n        Integer posuere erat a ante venenatis dapibus posuere velit aliquet.\n        Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Maecenas\n        sed diam eget risus varius blandit sit amet non magna.\n      </Explanation>\n      <FlowChart>\n        <FlowChartRectangle>\n          <InnerFlowChartDiv>\n            <FlowChartHeadline>1</FlowChartHeadline>\n            <FlowChartDescription>\n              Integer posuere erat a ante venenatis dapibus posuere velit\n              aliquet.{\" \"}\n            </FlowChartDescription>\n          </InnerFlowChartDiv>\n          <FlowChartRectangleSVG src={rectangleSVG} />\n        </FlowChartRectangle>\n\n        <FlowChartRectangle>\n          <InnerFlowChartDiv>\n            <FlowChartHeadline>2</FlowChartHeadline>\n            <FlowChartDescription>\n              Integer posuere erat a ante venenatis dapibus posuere velit\n              aliquet.{\" \"}\n            </FlowChartDescription>\n          </InnerFlowChartDiv>\n          <FlowChartRectangleSVG src={rectangleSVG} />\n        </FlowChartRectangle>\n\n        <FlowChartRectangle>\n          <InnerFlowChartDiv>\n            <FlowChartHeadline>3</FlowChartHeadline>\n            <FlowChartDescription>\n              Integer posuere erat a ante venenatis dapibus posuere velit\n              aliquet.{\" \"}\n            </FlowChartDescription>\n          </InnerFlowChartDiv>\n          <FlowChartRectangleSVG src={rectangleSVG} />\n        </FlowChartRectangle>\n      </FlowChart>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { FileInput } from \"./components/file-input/file-input\";\nimport { ChartContainer } from \"./components/chart-container/chart-container\";\nimport { MonthlyWidgetContainer } from \"./components/monthly-widget-container/monthly-widget-container\";\nimport { getCsvFile, UsageReportEntry } from \"./csv-reader\";\nimport { WidgetContext } from \"./components/context/widget-context\";\nimport { Headline } from \"./components/headline/headline\";\nimport { StartScreen } from \"./components/start-screen/start-screen\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst MainContent = styled.div`\n  max-width: 1280px;\n`;\n\nconst App = (): JSX.Element => {\n  const [csvData, setCsvData] = useState<UsageReportEntry[] | null>(null);\n  const handleInput = (file: File) => {\n    getCsvFile(file).then((res) => {\n      setCsvData(res);\n    });\n  };\n\n  const handleWidgetClick = (month: string, data: UsageReportEntry[]) => {\n    if (month === selectedMonthFromWidget.monthName) {\n      setSelectedMonthFromWidget({ monthName: \"\", data: [] });\n    } else {\n      setSelectedMonthFromWidget({ monthName: month, data: data });\n    }\n  };\n\n  const [selectedMonthFromWidget, setSelectedMonthFromWidget] = useState<{\n    monthName: string;\n    data: UsageReportEntry[];\n  }>({ monthName: \"\", data: [] });\n\n  return (\n    <Router>\n      <MainContent>\n        <WidgetContext.Provider\n          value={{\n            activeMonth: selectedMonthFromWidget,\n            setActiveMonth: (month: string, data: UsageReportEntry[]) =>\n              handleWidgetClick(month, data),\n          }}\n        >\n          <div className=\"App\">\n            <Headline />\n            <Switch>\n              <Route path=\"/github-billing-dashboard\">\n                <StartScreen />\n                <FileInput onInput={handleInput} />\n              </Route>\n              <Route path=\"/acitve\">\n                {csvData && <MonthlyWidgetContainer csvData={csvData} />}\n                {csvData && <ChartContainer csvData={csvData} />}\n              </Route>\n            </Switch>\n          </div>\n        </WidgetContext.Provider>\n      </MainContent>\n    </Router>\n  );\n};\n\nexport default App;\n","import { parse } from \"papaparse\";\n\nexport interface UsageReportCsvEntry {\n  date: string;\n  product: string;\n  repositorySlug: string;\n  quantity: string;\n  unitType: string;\n  pricePerUnit: string;\n  actionsWorkflow: string;\n  notes: string;\n}\n\nexport interface UsageReportEntry extends UsageReportCsvEntry {\n  totalPrice: number;\n}\n\nconst camalize = (str: string): string => {\n  return str\n    .toLowerCase()\n    .replace(/[^a-zA-Z0-0]+(.)/g, (m, chr) => chr.toUpperCase());\n};\nexport const getCsvFile = (file: File): Promise<UsageReportEntry[]> => {\n  return new Promise((resolve) => {\n    parse<UsageReportCsvEntry>(file, {\n      header: true,\n      skipEmptyLines: true,\n      transformHeader: (header: string): string => {\n        return camalize(header);\n      },\n      complete: (result) => {\n        const githubBillingEntries: UsageReportEntry[] = result.data.map(\n          (dailyEntry) => {\n            // remove dollar sign\n            const price = dailyEntry.pricePerUnit.substring(1);\n            return {\n              ...dailyEntry,\n              totalPrice: parseFloat(dailyEntry.quantity) * parseFloat(price),\n            };\n          }\n        );\n        resolve(githubBillingEntries);\n      },\n    });\n  });\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GlobalStyles } from \"./global-styles\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <>\n    <GlobalStyles />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}