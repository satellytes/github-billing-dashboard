{"version":3,"sources":["components/file-input.tsx","group-entries.ts","components/billing-bar-chart.tsx","components/billing-line-chart.tsx","components/widget-context.tsx","components/chart-container.tsx","components/monthly-widget.tsx","components/monthly-widget-container.tsx","App.tsx","csv-reader.ts","index.tsx"],"names":["FileInput","onInput","fileInput","useRef","handleInput","event","preventDefault","current","files","className","onSubmit","type","ref","groupEntriesPerDay","csvData","reduce","acc","obj","indexOfEntryForCurrentDate","currentDate","Date","date","toISOString","find","objectsInAcc","index","day","entries","push","totalPrice","newEntry","groupEntriesPerWeek","currentFirstDayOfTheWeek","startOfWeek","from","firstDayOfTheWeek","lastDayOfTheWeek","lastDayOfWeek","week","lightFormat","to","weekNumber","getISOWeek","getPriceByRepositoryName","repositoryName","currentEntries","priceByRepositoryName","forEach","entry","repositorySlug","Math","round","getMaximumTotalPriceOfAllDays","data","entriesGroupedPerDay","ceil","max","apply","map","BillingBarChart","groupedBy","maxValueOfYAxis","entriesGroupedPerWeek","repositoryNames","Set","colors","ResponsiveContainer","width","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","tick","parse","interval","YAxis","domain","unit","Tooltip","labelFormatter","label","itemSorter","item","value","Legend","Bar","currentEntry","stackId","fill","name","BillingLineChart","LineChart","margin","top","right","left","bottom","Line","stroke","strokeWidth","dot","WidgetContext","createContext","activeMonth","monthName","setActiveMonth","month","ChartContainer","useState","diagramType","setDiagramType","setGroupedBy","useContext","maxDailyValueOfYAxis","maxWeeklyValueOfYAxis","getMaximumTotalPriceOfAllWeeks","currentMaxValueOfYAxis","currentData","length","onClick","MonthlyWidget","monthlyEntry","cursor","hide","MonthlyWidgetContainer","entriesGroupedPerMonth","currentStartOfMonth","startOfMonth","firstDayOfMonth","lastDayOfTheMonth","lastDayOfMonth","format","getYear","getMonth","groupEntriesPerMonth","App","setCsvData","selectedMonthFromWidget","setSelectedMonthFromWidget","Provider","handleWidgetClick","file","Promise","resolve","reject","header","skipEmptyLines","transformHeader","toLowerCase","replace","m","chr","toUpperCase","complete","result","githubBillingEntries","dailyEntry","price","pricePerUnit","substring","parseFloat","quantity","getCsvFile","then","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b4d3771.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\n\ninterface FileInputProp {\n  onInput: (file: File) => void;\n}\n\nexport const FileInput = ({ onInput }: FileInputProp): JSX.Element => {\n  const fileInput = useRef<HTMLInputElement>(null);\n  const handleInput = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (fileInput && fileInput.current && fileInput.current.files) {\n      onInput(fileInput.current.files[0]);\n    }\n  };\n\n  return (\n    <div className=\"file-uploader\">\n      <form onSubmit={handleInput}>\n        <label>\n          Upload file:\n          <input type=\"file\" ref={fileInput} onInput={handleInput} />\n        </label>\n      </form>\n    </div>\n  );\n};\n","import { UsageReportEntry } from \"./csv-reader\";\nimport {\n  getISOWeek,\n  lastDayOfWeek,\n  lightFormat,\n  startOfWeek,\n  format,\n  getMonth,\n  lastDayOfMonth,\n  startOfMonth,\n  getYear,\n} from \"date-fns\";\n\ninterface UsageReportDay {\n  day: string; // iso date\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerDay = (\n  csvData: UsageReportEntry[]\n): UsageReportDay[] => {\n  return csvData.reduce((acc: UsageReportDay[], obj) => {\n    let indexOfEntryForCurrentDate: number = 0;\n    const currentDate = new Date(obj.date).toISOString();\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportDay, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.day === currentDate;\n      })\n    ) {\n      const newEntry: UsageReportDay = {\n        day: currentDate,\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\ninterface UsageReportWeek {\n  week: string; // a.e.: \"12.5. - 19.5.\"\n  from: string; // iso date\n  to: string; // iso date\n  weekNumber: number;\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerWeek = (\n  csvData: UsageReportEntry[]\n): UsageReportWeek[] => {\n  return csvData.reduce((acc: UsageReportWeek[], obj) => {\n    let indexOfEntryForCurrentDate: number = 0;\n    const currentDate = new Date(obj.date);\n    const currentFirstDayOfTheWeek = startOfWeek(currentDate);\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportWeek, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.from === currentFirstDayOfTheWeek.toISOString();\n      })\n    ) {\n      const firstDayOfTheWeek = startOfWeek(currentDate);\n      const lastDayOfTheWeek = lastDayOfWeek(currentDate);\n\n      const newEntry: UsageReportWeek = {\n        //TODO from, to und week enthalten in der widget Ansicht Daten, die gar nicht angezeigt werden\n        week: `${lightFormat(firstDayOfTheWeek, \"dd.MM.\")} - ${lightFormat(\n          lastDayOfTheWeek,\n          \"dd.MM.\"\n        )}`,\n        from: firstDayOfTheWeek.toISOString(),\n        to: lastDayOfTheWeek.toISOString(),\n        weekNumber: getISOWeek(currentDate),\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\nexport interface UsageReportMonth {\n  monthName: string; // a.e.: \"April 2020\"\n  month: number; // a.e. 4\n  from: string; // iso date\n  to: string; // iso date\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerMonth = (\n  csvData: UsageReportEntry[]\n): UsageReportMonth[] => {\n  return csvData.reduce((acc: UsageReportMonth[], obj) => {\n    let indexOfEntryForCurrentDate: number = 0;\n    const currentDate = new Date(obj.date);\n    const currentStartOfMonth = startOfMonth(currentDate).toISOString();\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportMonth, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.from === currentStartOfMonth;\n      })\n    ) {\n      const firstDayOfMonth = startOfMonth(currentDate);\n      const lastDayOfTheMonth = lastDayOfMonth(currentDate);\n\n      const newEntry: UsageReportMonth = {\n        monthName: `${format(currentDate, \"LLLL\")} ${getYear(currentDate)}`,\n        month: getMonth(currentDate) + 1,\n        from: firstDayOfMonth.toISOString(),\n        to: lastDayOfTheMonth.toISOString(),\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\nexport const getPriceByRepositoryName = (\n  repositoryName: string,\n  currentEntries: UsageReportEntry[]\n) => {\n  let priceByRepositoryName = 0;\n  currentEntries.forEach((entry) => {\n    if (entry.repositorySlug === repositoryName) {\n      priceByRepositoryName += entry.totalPrice;\n    }\n  });\n  return Math.round(priceByRepositoryName * 100) / 100;\n};\n\nexport const getMaximumTotalPriceOfAllDays = (data: UsageReportEntry[]) => {\n  const entriesGroupedPerDay = groupEntriesPerDay(data);\n  return Math.ceil(\n    Math.max.apply(\n      Math,\n      entriesGroupedPerDay.map((entry) => entry.totalPrice)\n    )\n  );\n};\n\nexport const getMaximumTotalPriceOfAllWeeks = (data: UsageReportEntry[]) => {\n  const entriesGroupedPerWeek = groupEntriesPerWeek(data);\n  return Math.ceil(\n    Math.max.apply(\n      Math,\n      entriesGroupedPerWeek.map((entry) => entry.totalPrice)\n    )\n  );\n};\n","import React from \"react\";\nimport { UsageReportEntry } from \"../csv-reader\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  groupEntriesPerDay,\n  groupEntriesPerWeek,\n  getPriceByRepositoryName,\n} from \"../group-entries\";\nimport { lightFormat } from \"date-fns\";\nimport \"react-dropdown/style.css\";\n\ninterface BillingChartProps {\n  csvData: UsageReportEntry[];\n  groupedBy: \"daily\" | \"weekly\";\n  maxValueOfYAxis: number;\n}\n\nexport const BillingBarChart = ({\n  csvData,\n  groupedBy,\n  maxValueOfYAxis,\n}: BillingChartProps): JSX.Element => {\n  const entriesGroupedPerDay = groupEntriesPerDay(csvData);\n  const entriesGroupedPerWeek = groupEntriesPerWeek(csvData);\n\n  const repositoryNames = [\n    // @ts-ignore\n    ...new Set(csvData.map((entry) => entry.repositorySlug)),\n  ];\n  const colors = [\n    \"#233666\",\n    \"#96ADEA\",\n    \"#4F79E6\",\n    \"#414C66\",\n    \"#3D5EB3\",\n    \"#233666\",\n    \"#96ADEA\",\n    \"#4F79E6\",\n    \"#414C66\",\n    \"#3D5EB3\",\n  ];\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={600}>\n      <BarChart\n        data={\n          groupedBy === \"daily\" ? entriesGroupedPerDay : entriesGroupedPerWeek\n        }\n      >\n        <CartesianGrid strokeDasharray=\"2 2\" />\n        <XAxis\n          dataKey={groupedBy === \"daily\" ? \"day\" : \"week\"}\n          tickFormatter={(tick) =>\n            Date.parse(tick) ? lightFormat(new Date(tick), \"dd.MM.\") : tick\n          }\n          interval=\"preserveStart\"\n        />\n        <YAxis domain={[0, maxValueOfYAxis]} unit=\" $\" />\n        {/*labelFormatter checks if the given label has the right format*/}\n        <Tooltip\n          labelFormatter={(label) =>\n            Date.parse(label) ? lightFormat(new Date(label), \"dd.MM.\") : label\n          }\n          //@ts-ignore\n          itemSorter={(item) => item.value}\n        />\n        <Legend />\n        {repositoryNames.map((repositoryName, index) => {\n          return (\n            <Bar\n              dataKey={(currentEntry) =>\n                getPriceByRepositoryName(repositoryName, currentEntry.entries)\n              }\n              stackId=\"a\"\n              fill={colors[index]}\n              key={index}\n              name={repositoryName}\n              unit={\"$\"}\n            />\n          );\n        })}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n","import React from \"react\";\nimport { UsageReportEntry } from \"../csv-reader\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  groupEntriesPerDay,\n  groupEntriesPerWeek,\n  getPriceByRepositoryName,\n} from \"../group-entries\";\nimport \"react-dropdown/style.css\";\nimport { lightFormat } from \"date-fns\";\n\ninterface TestLineChartProps {\n  csvData: UsageReportEntry[];\n  groupedBy: \"daily\" | \"weekly\";\n  maxValueOfYAxis: number;\n}\n\nexport const BillingLineChart = ({\n  csvData,\n  groupedBy,\n  maxValueOfYAxis,\n}: TestLineChartProps): JSX.Element => {\n  const entriesGroupedPerDay = groupEntriesPerDay(csvData);\n  const entriesGroupedPerWeek = groupEntriesPerWeek(csvData);\n\n  const repositoryNames = [\n    // @ts-ignore\n    ...new Set(csvData.map((entry) => entry.repositorySlug)),\n  ];\n  const colors = [\n    \"#233666\",\n    \"#96ADEA\",\n    \"#4F79E6\",\n    \"#414C66\",\n    \"#3D5EB3\",\n    \"#233666\",\n    \"#96ADEA\",\n    \"#4F79E6\",\n    \"#414C66\",\n    \"#3D5EB3\",\n  ];\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={1000}>\n      <LineChart\n        data={\n          groupedBy === \"daily\" ? entriesGroupedPerDay : entriesGroupedPerWeek\n        }\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <XAxis\n          dataKey={groupedBy === \"daily\" ? \"day\" : \"week\"}\n          tickFormatter={(tick) =>\n            Date.parse(tick) ? lightFormat(new Date(tick), \"dd.MM.\") : tick\n          }\n          interval=\"preserveStart\"\n        />\n        <YAxis domain={[0, maxValueOfYAxis]} unit=\" $\" />\n        {/*labelFormatter checks if the given label has the right format*/}\n        <Tooltip\n          labelFormatter={(label) =>\n            Date.parse(label) ? lightFormat(new Date(label), \"dd.MM.\") : label\n          }\n          //@ts-ignore\n          itemSorter={(item) => item.value}\n        />\n        <Legend />\n        {repositoryNames.map((repositoryName, index) => {\n          return (\n            <Line\n              type=\"monotone\"\n              stroke={colors[index]}\n              dataKey={(currentEntry) =>\n                getPriceByRepositoryName(repositoryName, currentEntry.entries)\n              }\n              key={index}\n              name={repositoryName}\n              unit={\"$\"}\n              strokeWidth={4}\n              dot={false}\n            />\n          );\n        })}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n","import { createContext } from \"react\";\nimport { UsageReportEntry } from \"../csv-reader\";\n\ninterface WidgetContextType {\n  activeMonth: { monthName: string; data: UsageReportEntry[] };\n  setActiveMonth: (month: string, data: UsageReportEntry[]) => void;\n}\n\nexport const WidgetContext = createContext<WidgetContextType>({\n  activeMonth: { monthName: \"\", data: [] },\n  setActiveMonth: (month: string, data: UsageReportEntry[]) => {},\n});\n","import React, { useContext, useState } from \"react\";\nimport { UsageReportEntry } from \"../csv-reader\";\nimport { BillingBarChart } from \"./billing-bar-chart\";\nimport { BillingLineChart } from \"./billing-line-chart\";\nimport \"./chart-container.css\";\nimport { WidgetContext } from \"./widget-context\";\nimport {\n  getMaximumTotalPriceOfAllDays,\n  getMaximumTotalPriceOfAllWeeks,\n} from \"../group-entries\";\n\ninterface ChartContainerProps {\n  csvData: UsageReportEntry[];\n}\n\nexport const ChartContainer = ({\n  csvData,\n}: ChartContainerProps): JSX.Element => {\n  const [diagramType, setDiagramType] = useState<\"Bar\" | \"Line\">(\"Bar\");\n  const [groupedBy, setGroupedBy] = useState<\"daily\" | \"weekly\">(\"daily\");\n\n  // Selected month from mini-widgets\n  const { activeMonth } = useContext(WidgetContext);\n\n  const maxDailyValueOfYAxis = getMaximumTotalPriceOfAllDays(csvData);\n  const maxWeeklyValueOfYAxis = getMaximumTotalPriceOfAllWeeks(csvData);\n  const currentMaxValueOfYAxis =\n    groupedBy === \"daily\" ? maxDailyValueOfYAxis : maxWeeklyValueOfYAxis;\n  //currentData changes when a mini-widget is selected\n  const currentData = activeMonth.monthName === \"\" ? csvData : activeMonth.data;\n\n  return (\n    <>\n      <h2>Angezeigter Zeitraum</h2>\n      <p>\n        {activeMonth.monthName ||\n          `${csvData[0].date} bis ${\n            csvData[csvData.length - 1].date\n          } (kompletter Datensatz)`}\n      </p>\n      <div className={\"toggle-button-div\"}>\n        <div>\n          <button\n            className={`toggle-button left-toggle-button ${\n              groupedBy === \"daily\" ? \"selected-button\" : null\n            }`}\n            onClick={() => setGroupedBy(\"daily\")}\n          >\n            Daily\n          </button>\n          <button\n            className={`toggle-button right-toggle-button ${\n              groupedBy === \"weekly\" ? \"selected-button\" : null\n            }`}\n            onClick={() => setGroupedBy(\"weekly\")}\n          >\n            Weekly\n          </button>\n        </div>\n\n        <div>\n          <button\n            className={`toggle-button left-toggle-button ${\n              diagramType === \"Bar\" ? \"selected-button\" : null\n            }`}\n            onClick={() => setDiagramType(\"Bar\")}\n          >\n            Bar\n          </button>\n          <button\n            className={`toggle-button right-toggle-button ${\n              diagramType === \"Line\" ? \"selected-button\" : null\n            }`}\n            onClick={() => setDiagramType(\"Line\")}\n          >\n            Line\n          </button>\n        </div>\n      </div>\n      {diagramType === \"Bar\" ? (\n        <BillingBarChart\n          maxValueOfYAxis={currentMaxValueOfYAxis}\n          csvData={currentData}\n          groupedBy={groupedBy}\n        />\n      ) : (\n        <BillingLineChart\n          maxValueOfYAxis={currentMaxValueOfYAxis}\n          csvData={currentData}\n          groupedBy={groupedBy}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { UsageReportMonth } from \"../group-entries\";\nimport { LineChart, Line, YAxis } from \"recharts\";\nimport { groupEntriesPerDay } from \"../group-entries\";\nimport { WidgetContext } from \"./widget-context\";\nimport \"./monthly-widget.css\";\n\ninterface MonthlyWidgetProps {\n  monthlyEntry: UsageReportMonth;\n  maxValueOfYAxis: number;\n}\n\nexport const MonthlyWidget = ({\n  monthlyEntry,\n  maxValueOfYAxis,\n}: MonthlyWidgetProps): JSX.Element => {\n  const { activeMonth, setActiveMonth } = useContext(WidgetContext);\n  const entriesGroupedPerDay = groupEntriesPerDay(monthlyEntry.entries);\n\n  return (\n    <div\n      className={\n        \"monthly-widget\" +\n        (activeMonth.monthName === monthlyEntry.monthName\n          ? \" monthly-widget-active\"\n          : \"\")\n      }\n      onClick={() =>\n        setActiveMonth(monthlyEntry.monthName, monthlyEntry.entries)\n      }\n    >\n      <div>\n        <h4>{monthlyEntry.monthName}</h4>\n        <p>{`${Math.round(monthlyEntry.totalPrice * 100) / 100} $`}</p>\n      </div>\n      <LineChart\n        //@ts-ignore\n        cursor=\"pointer\"\n        width={100}\n        height={50}\n        data={entriesGroupedPerDay}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n        className={\"mini-chart\"}\n      >\n        <YAxis hide={true} domain={[0, maxValueOfYAxis]} />\n        <Line\n          type=\"monotone\"\n          dataKey=\"totalPrice\"\n          stroke=\"#82ca9d\"\n          dot={false}\n        />\n      </LineChart>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { UsageReportEntry } from \"../csv-reader\";\nimport { MonthlyWidget } from \"./monthly-widget\";\nimport {\n  getMaximumTotalPriceOfAllDays,\n  groupEntriesPerMonth,\n} from \"../group-entries\";\nimport \"./monthly-widget-container.css\";\n\ninterface MonthlyWidgetProps {\n  csvData: UsageReportEntry[];\n}\n\nexport const MonthlyWidgetContainer = ({\n  csvData,\n}: MonthlyWidgetProps): JSX.Element => {\n  const maxValueOfYAxis = getMaximumTotalPriceOfAllDays(csvData);\n  const entriesGroupedPerMonth = groupEntriesPerMonth(csvData);\n  return (\n    <div className={\"widget-container\"}>\n      {entriesGroupedPerMonth.map((monthlyEntry) => (\n        <MonthlyWidget\n          key={monthlyEntry.month}\n          monthlyEntry={monthlyEntry}\n          maxValueOfYAxis={maxValueOfYAxis}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { FileInput } from \"./components/file-input\";\nimport { ChartContainer } from \"./components/chart-container\";\nimport { MonthlyWidgetContainer } from \"./components/monthly-widget-container\";\nimport { getCsvFile, UsageReportEntry } from \"./csv-reader\";\nimport { WidgetContext } from \"./components/widget-context\";\n\nconst App = (): JSX.Element => {\n  const [csvData, setCsvData] = useState<UsageReportEntry[] | null>(null);\n\n  const handleInput = (file: File) => {\n    getCsvFile(file).then((res) => {\n      setCsvData(res);\n    });\n  };\n\n  const handleWidgetClick = (month: string, data: UsageReportEntry[]) => {\n    if (month === selectedMonthFromWidget.monthName) {\n      setSelectedMonthFromWidget({ monthName: \"\", data: [] });\n    } else {\n      setSelectedMonthFromWidget({ monthName: month, data: data });\n    }\n  };\n  const [selectedMonthFromWidget, setSelectedMonthFromWidget] = useState<{\n    monthName: string;\n    data: UsageReportEntry[];\n  }>({ monthName: \"\", data: [] });\n\n  return (\n    <WidgetContext.Provider\n      value={{\n        activeMonth: selectedMonthFromWidget,\n        setActiveMonth: (month: string, data: UsageReportEntry[]) =>\n          handleWidgetClick(month, data),\n      }}\n    >\n      <div className=\"App\">\n        <FileInput onInput={handleInput} />\n        {csvData && <MonthlyWidgetContainer csvData={csvData} />}\n        {csvData && <ChartContainer csvData={csvData} />}\n      </div>\n    </WidgetContext.Provider>\n  );\n};\n\nexport default App;\n","import { parse } from \"papaparse\";\n\nexport interface UsageReportCsvEntry {\n  date: string;\n  product: string;\n  repositorySlug: string;\n  quantity: string;\n  unitType: string;\n  pricePerUnit: string;\n  actionsWorkflow: string;\n  notes: string;\n}\n\nexport interface UsageReportEntry extends UsageReportCsvEntry {\n  totalPrice: number;\n}\n\nconst camalize = (str: string): string => {\n  return str\n    .toLowerCase()\n    .replace(/[^a-zA-Z0-0]+(.)/g, (m, chr) => chr.toUpperCase());\n};\nexport const getCsvFile = (file: File): Promise<UsageReportEntry[]> => {\n  return new Promise((resolve, reject) => {\n    parse<UsageReportCsvEntry>(file, {\n      header: true,\n      skipEmptyLines: true,\n      transformHeader: (header: string): string => {\n        return camalize(header);\n      },\n      complete: (result) => {\n        const githubBillingEntries: UsageReportEntry[] = result.data.map(\n          (dailyEntry) => {\n            // remove dollar sign\n            const price = dailyEntry.pricePerUnit.substring(1);\n            return {\n              ...dailyEntry,\n              totalPrice: parseFloat(dailyEntry.quantity) * parseFloat(price),\n            };\n          }\n        );\n\n        resolve(githubBillingEntries);\n      },\n    });\n  });\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}