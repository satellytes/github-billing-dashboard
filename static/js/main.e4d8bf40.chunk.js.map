{"version":3,"sources":["fonts/Coco-Gothic-Regular-TTF.ttf","fonts/Coco-Gothic-Bold-TTF.ttf","fonts/Coco-Gothic-Heavy-TTF.ttf","global-styles.tsx","components/context/widget-context.tsx","components/grid/grid.tsx","components/headline/headline.tsx","components/start-description/start-description.tsx","components/file-input/file-input.tsx","pages/home-page.tsx","util/group-entries.ts","components/monthly-widget/monthly-widget.tsx","components/monthly-widget-container/monthly-widget-container.tsx","components/billing-chart/billing-chart-components.tsx","util/date-util.ts","components/billing-chart/billing-bar-chart.tsx","components/billing-chart/billing-line-chart.tsx","components/chart-container/chart-container.tsx","pages/dashboard-page.tsx","App.tsx","util/csv-reader.ts","index.tsx"],"names":["GlobalStyles","createGlobalStyle","CocoGothicRegularTFF","CocoGothicBoldTFF","CocoGothicHeavyTFF","WidgetContext","createContext","activeMonth","monthName","data","setActiveMonth","breakpoints","xs","sm","md","lg","xl","GridItem","styled","div","props","up","Grid","breakpoint","StyledHeadline","h1","Headline","PlaceholderForImage","Subline","h2","Text","p","FlowChartRectangle","FlowChartHeadline","FlowChartDescription","StartDescription","Title","StyledFileInput","FileInput","onInput","history","useHistory","onDrop","useCallback","acceptedFiles","length","push","useDropzone","accept","getRootProps","getInputProps","isDragActive","HomePage","handleInput","groupEntriesPerDay","csvData","reduce","acc","obj","indexOfEntryForCurrentDate","currentDate","Date","date","toISOString","find","objectsInAcc","index","day","entries","totalPrice","newEntry","groupEntriesPerWeek","isDataFromWidget","currentFirstDayOfTheWeek","startOfWeek","from","firstDayOfTheWeek","lastDayOfTheWeek","lastDayOfWeek","firstDayOfTheWeekRange","lastDayOfTheWeekRange","isSameMonth","startOfMonth","lastDayOfMonth","week","lightFormat","to","weekNumber","getISOWeek","getPriceByRepositoryName","repositoryName","currentEntries","priceByRepositoryName","forEach","entry","repositorySlug","Math","round","getMaximumTotalPriceOfAllDays","entriesGroupedPerDay","ceil","max","map","StyledWidget","isActive","WidgetDescription","WidgetMonth","WidgetValue","fontSize","Arrow","span","isMoreExpensiveThanPreviousMonth","MonthlyWidget","monthlyEntry","maxValueOfYAxis","differenceToPreviousMonth","isLastMonth","isFirstMonth","useContext","formattedDifferenceToPreviousMonth","arrowSymbol","firstDayOfMonth","tooltipValue","onClick","style","color","title","ResponsiveContainer","width","height","LineChart","cursor","YAxis","hide","domain","Line","type","dataKey","stroke","strokeWidth","dot","totalPriceOfPreviousMonth","StyledContainer","MonthlyWidgetContainer","entriesGroupedPerMonth","currentStartOfMonth","lastDayOfTheMonth","format","getYear","month","getMonth","groupEntriesPerMonth","CustomTooltip","Tooltip","tooltipLabelStyle","fontStyle","fontWeight","lineHeight","marginBottom","tooltipItemStyle","padding","tooltipContentStyle","borderRadius","borderBlockColor","colors","getPeriodOfTimeString","isStringDateValue","possibleDateValue","parse","BillingBarChart","groupedBy","repositoryNames","entriesGroupedPerWeek","BarChart","CartesianGrid","vertical","XAxis","axisLine","tickLine","tick","fill","tickFormatter","minTickGap","unit","tickCount","labelFormatter","label","itemSorter","repositoryGroupedByDay","value","labelStyle","itemStyle","contentStyle","Legend","Bar","currentEntry","stackId","name","BillingLineChart","ChartDiv","ButtonDiv","Button","button","LeftToggleButton","RightToggleButton","ChartHeadline","ChartDescription","ChartContainer","useState","diagramType","setDiagramType","setGroupedBy","maxDailyValueOfYAxis","maxWeeklyValueOfYAxis","getMaximumTotalPriceOfAllWeeks","currentMaxValueOfYAxis","currentData","repositoryNamesWithDuplicates","filter","indexOf","ApplicationDescription","DashboardPage","MainContent","App","setCsvData","selectedMonthFromWidget","setSelectedMonthFromWidget","Provider","handleWidgetClick","path","file","Promise","resolve","header","skipEmptyLines","transformHeader","toLowerCase","replace","m","chr","toUpperCase","complete","result","githubBillingEntries","dailyEntry","price","pricePerUnit","substring","parseFloat","quantity","getCsvFile","then","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4d8bf40.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Coco-Gothic-Regular-TTF.76afad7d.ttf\";","export default __webpack_public_path__ + \"static/media/Coco-Gothic-Bold-TTF.ee8e9b6a.ttf\";","export default __webpack_public_path__ + \"static/media/Coco-Gothic-Heavy-TTF.d8ca8344.ttf\";","import { createGlobalStyle } from \"styled-components\";\nimport CocoGothicRegularTFF from \"./fonts/Coco-Gothic-Regular-TTF.ttf\";\nimport CocoGothicBoldTFF from \"./fonts/Coco-Gothic-Bold-TTF.ttf\";\nimport CocoGothicHeavyTFF from \"./fonts/Coco-Gothic-Heavy-TTF.ttf\";\n\nexport const GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: \"Coco Gothic\";\n    src: url(${CocoGothicRegularTFF}) format(\"truetype\");\n    font-weight: normal;\n  }\n\n  @font-face {\n    font-family: \"Coco Gothic\";\n    src: url(${CocoGothicBoldTFF}) format(\"truetype\");\n    font-weight: bold;\n  }\n\n  @font-face {\n    font-family: \"Coco Gothic\";\n    src: url(${CocoGothicHeavyTFF}) format(\"truetype\");\n    font-weight: 900;\n  }\n  \n  body {\n    margin: 0;\n    font-family: \"Coco Gothic\",sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: #202840;\n    color: #FFF;\n  }\n  \n  h1, h2 {\n    margin: 0;\n  }\n`;\n","import { createContext } from \"react\";\nimport { UsageReportEntry } from \"../../util/csv-reader\";\n\ninterface WidgetContextType {\n  activeMonth: { monthName: string; data: UsageReportEntry[] };\n  setActiveMonth: (month: string, data: UsageReportEntry[]) => void;\n}\n\nexport const WidgetContext = createContext<WidgetContextType>({\n  activeMonth: { monthName: \"\", data: [] },\n  setActiveMonth: () => undefined,\n});\n","import styled from \"styled-components\";\n\ntype GridItemSize = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\n\ninterface GridItemProps {\n  xs?: GridItemSize;\n  sm?: GridItemSize;\n  md?: GridItemSize;\n  lg?: GridItemSize;\n  xl?: GridItemSize;\n}\n\ninterface Breakpoints {\n  xs: string;\n  sm: string;\n  md: string;\n  lg: string;\n  xl: string;\n}\n\nconst breakpoints = {\n  xs: \"0px\",\n  sm: \"600px\",\n  md: \"960px\",\n  lg: \"1280px\",\n  xl: \"1920px\",\n};\n\nexport const GridItem = styled.div<GridItemProps>`\n  grid-column-start: span ${(props) => props.xs || 12};\n\n  ${`@media (min-width: ${breakpoints.md})`} {\n  }\n\n  ${(props) =>\n    props.sm &&\n    `\n    ${up(\"sm\")} {\n      grid-column-start: span ${props.sm};\n    }\n  `};\n  ${(props) =>\n    props.md &&\n    `\n    ${up(\"md\")} {\n      grid-column-start: span ${props.md};\n    }\n  `};\n  ${(props) =>\n    props.lg &&\n    `\n    ${up(\"lg\")} {\n      grid-column-start: span ${props.lg};\n    }\n  `};\n  ${(props) =>\n    props.xl &&\n    `\n    ${up(\"xl\")} {\n      grid-column-start: span ${props.xl}\n    }\n  `};\n`;\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n`;\n\nexport const up = (breakpoint: keyof Breakpoints): string => `\n    @media (min-width: ${breakpoints[breakpoint]})\n  `;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { GridItem } from \"../grid/grid\";\n\nconst StyledHeadline = styled.h1`\n  font-style: normal;\n  font-weight: bold;\n  font-size: 72px;\n  line-height: 79px;\n  margin-top: 254px;\n`;\n\nexport const Headline = (): JSX.Element => {\n  return (\n    <>\n      {/*TODO: Add satellytes symbol*/}\n      <GridItem>\n        <StyledHeadline>GitHub Report</StyledHeadline>\n      </GridItem>\n    </>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { GridItem } from \"../grid/grid\";\n\n//TODO Remove Placeholder\nconst PlaceholderForImage = styled.div`\n  background: rgba(122, 143, 204, 0.3);\n  height: 142px;\n  margin: 0;\n`;\n\nconst Subline = styled.h2`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 32px;\n  line-height: 110%;\n  margin-top: 40px;\n`;\n\nconst Text = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  line-height: 150%;\n  margin-top: 32px;\n  margin-bottom: 32px;\n`;\n\nconst FlowChartRectangle = styled.div`\n  margin: 40px 24px 0 0;\n  padding: 20px 40px 20px 20px;\n  clip-path: polygon(0% 0%, 94% 0, 100% 50%, 94% 100%, 0% 100%);\n  background: rgba(122, 143, 204, 0.3);\n`;\n\nconst FlowChartHeadline = styled.h1`\n  margin-bottom: 8px;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 32px;\n  line-height: 110%;\n`;\n\nconst FlowChartDescription = styled.p`\n  margin-bottom: 16px;\n  margin-top: 0;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 14px;\n  line-height: 150%;\n`;\n\nexport const StartDescription = (): JSX.Element => {\n  return (\n    <>\n      <GridItem md={7}>\n        <Subline>\n          Hier ein kurzer Einführungssatz zum Tool integer posuere erat a ante\n          venenatis\n        </Subline>\n        <Text>\n          Integer posuere erat a ante venenatis dapibus posuere velit aliquet.\n          Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Maecenas\n          sed diam eget risus varius blandit sit amet non magna.\n        </Text>\n      </GridItem>\n      <GridItem md={4} />\n      <GridItem xs={11} sm={4}>\n        <FlowChartRectangle>\n          <FlowChartHeadline>1</FlowChartHeadline>\n          <FlowChartDescription>\n            Integer posuere erat a ante venenatis dapibus posuere velit aliquet.\n          </FlowChartDescription>\n          <PlaceholderForImage />\n        </FlowChartRectangle>\n      </GridItem>\n      <GridItem xs={11} sm={4}>\n        <FlowChartRectangle>\n          <FlowChartHeadline>2</FlowChartHeadline>\n          <FlowChartDescription>\n            Integer posuere erat a ante venenatis dapibus posuere velit aliquet.\n          </FlowChartDescription>\n          <PlaceholderForImage />\n        </FlowChartRectangle>\n      </GridItem>\n      <GridItem xs={11} sm={4}>\n        <FlowChartRectangle>\n          <FlowChartHeadline>3</FlowChartHeadline>\n          <FlowChartDescription>\n            Integer posuere erat a ante venenatis dapibus posuere velit aliquet.\n          </FlowChartDescription>\n          <PlaceholderForImage />\n        </FlowChartRectangle>\n      </GridItem>\n    </>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport styled from \"styled-components\";\nimport { useHistory } from \"react-router-dom\";\nimport { GridItem } from \"../grid/grid\";\n\ninterface FileInputProp {\n  onInput: (file: File) => void;\n}\n\nconst Title = styled.h2`\n  font-style: normal;\n  font-weight: bold;\n  font-size: 32px;\n  line-height: 35px;\n  margin-top: 120px;\n`;\n\nconst Subline = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  line-height: 24px;\n  margin-top: 24px;\n`;\n\nconst StyledFileInput = styled.div`\n  margin-top: 32px;\n  margin-bottom: 397px;\n  padding: 30px;\n  background: rgba(122, 143, 204, 0.3);\n  border: 1px solid rgba(122, 143, 204, 0.3);\n  border-radius: 4px;\n  text-align: center;\n  cursor: pointer;\n\n  &:hover {\n    border-color: white;\n  }\n`;\n\nexport const FileInput = ({ onInput }: FileInputProp): JSX.Element => {\n  const history = useHistory();\n\n  const onDrop = useCallback((acceptedFiles) => {\n    if (acceptedFiles.length > 0) {\n      onInput(acceptedFiles[0]);\n      history.push(\"/dashboard-page\");\n    }\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: \".csv\",\n  });\n\n  return (\n    <>\n      <GridItem md={7}>\n        <Title>Github Report Usage UI</Title>\n        <Subline>\n          Integer posuere erat a ante venenatis dapibus posuere velit aliquet.\n          Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Maecenas\n          sed diam eget risus varius blandit sit amet non magna.\n        </Subline>\n      </GridItem>\n      <GridItem>\n        <StyledFileInput {...getRootProps()}>\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p>Drop the file here ...</p>\n          ) : (\n            <p>Drop a csv file here, or click to select a file</p>\n          )}\n        </StyledFileInput>\n      </GridItem>\n    </>\n  );\n};\n","import React from \"react\";\nimport { StartDescription } from \"../components/start-description/start-description\";\nimport { FileInput } from \"../components/file-input/file-input\";\n\ninterface StartProp {\n  handleInput: (file: File) => void;\n}\n\nexport const HomePage = ({ handleInput }: StartProp): JSX.Element => {\n  return (\n    <>\n      <StartDescription />\n      <FileInput onInput={handleInput} />\n    </>\n  );\n};\n","import { UsageReportEntry } from \"./csv-reader\";\nimport {\n  getISOWeek,\n  lastDayOfWeek,\n  lightFormat,\n  startOfWeek,\n  format,\n  getMonth,\n  lastDayOfMonth,\n  startOfMonth,\n  getYear,\n  isSameMonth,\n} from \"date-fns\";\n\nexport interface UsageReportDay {\n  day: string; // iso date\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerDay = (\n  csvData: UsageReportEntry[]\n): UsageReportDay[] => {\n  return csvData.reduce((acc: UsageReportDay[], obj) => {\n    let indexOfEntryForCurrentDate = 0;\n    const currentDate = new Date(obj.date).toISOString();\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportDay, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.day === currentDate;\n      })\n    ) {\n      const newEntry: UsageReportDay = {\n        day: currentDate,\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\nexport interface UsageReportWeek {\n  week: string; // a.e.: \"12.5. - 19.5.\"\n  from: string; // iso date\n  to: string; // iso date\n  weekNumber: number;\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerWeek = (\n  csvData: UsageReportEntry[],\n  isDataFromWidget: boolean\n): UsageReportWeek[] => {\n  return csvData.reduce((acc: UsageReportWeek[], obj) => {\n    let indexOfEntryForCurrentDate = 0;\n    const currentDate = new Date(obj.date);\n    const currentFirstDayOfTheWeek = startOfWeek(currentDate);\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportWeek, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.from === currentFirstDayOfTheWeek.toISOString();\n      })\n    ) {\n      const firstDayOfTheWeek = startOfWeek(currentDate);\n      const lastDayOfTheWeek = lastDayOfWeek(currentDate);\n\n      let firstDayOfTheWeekRange = startOfWeek(currentDate);\n      let lastDayOfTheWeekRange = lastDayOfWeek(currentDate);\n\n      if (isDataFromWidget) {\n        if (!isSameMonth(firstDayOfTheWeek, currentDate)) {\n          firstDayOfTheWeekRange = startOfMonth(currentDate);\n        }\n        if (!isSameMonth(lastDayOfTheWeek, currentDate)) {\n          lastDayOfTheWeekRange = lastDayOfMonth(currentDate);\n        }\n      }\n\n      const newEntry: UsageReportWeek = {\n        week: `${lightFormat(firstDayOfTheWeekRange, \"dd.MM.\")} - ${lightFormat(\n          lastDayOfTheWeekRange,\n          \"dd.MM.\"\n        )}`,\n        from: firstDayOfTheWeek.toISOString(),\n        to: lastDayOfTheWeek.toISOString(),\n        weekNumber: getISOWeek(currentDate),\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\nexport interface UsageReportMonth {\n  monthName: string; // a.e.: \"April 2020\"\n  month: number; // a.e. 4\n  from: string; // iso date\n  to: string; // iso date\n  totalPrice: number; // for the charts total value\n  entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerMonth = (\n  csvData: UsageReportEntry[]\n): UsageReportMonth[] => {\n  return csvData.reduce((acc: UsageReportMonth[], obj) => {\n    let indexOfEntryForCurrentDate = 0;\n    const currentDate = new Date(obj.date);\n    const currentStartOfMonth = startOfMonth(currentDate).toISOString();\n\n    //Is the current date already in acc?\n    if (\n      !acc.find((objectsInAcc: UsageReportMonth, index) => {\n        indexOfEntryForCurrentDate = index;\n        return objectsInAcc.from === currentStartOfMonth;\n      })\n    ) {\n      const firstDayOfMonth = startOfMonth(currentDate);\n      const lastDayOfTheMonth = lastDayOfMonth(currentDate);\n\n      const newEntry: UsageReportMonth = {\n        monthName: `${format(currentDate, \"LLLL\")} ${getYear(currentDate)}`,\n        month: getMonth(currentDate) + 1,\n        from: firstDayOfMonth.toISOString(),\n        to: lastDayOfTheMonth.toISOString(),\n        totalPrice: obj.totalPrice,\n        entries: [obj],\n      };\n\n      acc.push(newEntry);\n    } else {\n      acc[indexOfEntryForCurrentDate].entries.push(obj);\n      acc[indexOfEntryForCurrentDate].totalPrice =\n        acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice;\n    }\n    return acc;\n  }, []);\n};\n\nexport const getPriceByRepositoryName = (\n  repositoryName: string,\n  currentEntries: UsageReportEntry[]\n): number => {\n  let priceByRepositoryName = 0;\n  currentEntries.forEach((entry) => {\n    if (entry.repositorySlug === repositoryName) {\n      priceByRepositoryName += entry.totalPrice;\n    }\n  });\n  return Math.round(priceByRepositoryName * 100) / 100;\n};\n\nexport const getMaximumTotalPriceOfAllDays = (\n  data: UsageReportEntry[]\n): number => {\n  const entriesGroupedPerDay = groupEntriesPerDay(data);\n  return Math.ceil(\n    Math.max(...entriesGroupedPerDay.map((entry) => entry.totalPrice))\n  );\n};\n\nexport const getMaximumTotalPriceOfAllWeeks = (\n  data: UsageReportEntry[]\n): number => {\n  const entriesGroupedPerWeek = groupEntriesPerWeek(data, false);\n  return Math.ceil(\n    Math.max(...entriesGroupedPerWeek.map((entry) => entry.totalPrice))\n  );\n};\n","import React, { useContext } from \"react\";\nimport { UsageReportMonth } from \"../../util/group-entries\";\nimport { LineChart, Line, YAxis, ResponsiveContainer } from \"recharts\";\nimport { groupEntriesPerDay } from \"../../util/group-entries\";\nimport { WidgetContext } from \"../context/widget-context\";\nimport styled from \"styled-components\";\nimport { GridItem } from \"../grid/grid\";\nimport { lightFormat } from \"date-fns\";\n\ninterface MonthlyWidgetProps {\n  monthlyEntry: UsageReportMonth;\n  maxValueOfYAxis: number;\n  isMoreExpensiveThanPreviousMonth: boolean;\n  differenceToPreviousMonth: number;\n  isFirstMonth: boolean;\n  isLastMonth: boolean;\n}\n\nconst StyledWidget = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  cursor: pointer;\n  background: rgba(122, 143, 204, 0.3);\n  padding: 16px;\n  border: ${(props: { isActive: boolean }) =>\n    props.isActive ? \"1px solid white\" : \"1px solid rgba(122, 143, 204, 0.3)\"};\n\n  border-radius: 4px;\n\n  &:hover {\n    border-color: white;\n  }\n`;\n\nconst WidgetDescription = styled.div``;\n\nconst WidgetMonth = styled.h2`\n  margin-bottom: 8px;\n  font-style: normal;\n  font-weight: 900;\n  font-size: 12px;\n  line-height: 18px;\n  text-transform: uppercase;\n`;\n\nconst WidgetValue = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  margin-top: 8px;\n  margin-bottom: 0;\n  text-transform: uppercase;\n  font-size: ${(props: { fontSize: number }) => `${props.fontSize}px`};\n`;\n\nconst Arrow = styled.span`\n  color: ${(props: { isMoreExpensiveThanPreviousMonth: boolean }) =>\n    props.isMoreExpensiveThanPreviousMonth ? \"#DC052D\" : \"#75F0C7\"};\n`;\n\nexport const MonthlyWidget = ({\n  monthlyEntry,\n  maxValueOfYAxis,\n  isMoreExpensiveThanPreviousMonth,\n  differenceToPreviousMonth,\n  isLastMonth,\n  isFirstMonth,\n}: MonthlyWidgetProps): JSX.Element => {\n  const { activeMonth, setActiveMonth } = useContext(WidgetContext);\n  const entriesGroupedPerDay = groupEntriesPerDay(monthlyEntry.entries);\n  const formattedDifferenceToPreviousMonth = `${\n    differenceToPreviousMonth >= 0 ? \"+\" : \"\"\n  }${Math.round(differenceToPreviousMonth * 100) / 100} $`;\n  //\"\\u2191\" = Arrow-Up-Symbol, \"\\u2193\" = Arrow-Down-Symbol\n  const arrowSymbol = isMoreExpensiveThanPreviousMonth ? \" \\u2191\" : \" \\u2193\";\n  const firstDayOfMonth = monthlyEntry.entries[0].date;\n  const lastDayOfMonth =\n    monthlyEntry.entries[monthlyEntry.entries.length - 1].date;\n  const tooltipValue = `${\n    Math.round(differenceToPreviousMonth * 100) / 100\n  } $ ${isMoreExpensiveThanPreviousMonth ? \"mehr\" : \"weniger\"} als im Vormonat`;\n\n  return (\n    <GridItem sm={6} md={4} lg={3}>\n      <StyledWidget\n        isActive={activeMonth.monthName === monthlyEntry.monthName}\n        onClick={() =>\n          setActiveMonth(monthlyEntry.monthName, monthlyEntry.entries)\n        }\n      >\n        <WidgetDescription>\n          <WidgetMonth>{monthlyEntry.monthName}</WidgetMonth>\n          {isFirstMonth && (\n            <WidgetMonth style={{ color: \"yellow\" }}>\n              ab {lightFormat(new Date(firstDayOfMonth), \"dd.MM.\")}\n            </WidgetMonth>\n          )}\n          {isLastMonth && (\n            <WidgetMonth style={{ color: \"yellow\" }}>\n              bis {lightFormat(new Date(lastDayOfMonth), \"dd.MM.\")}\n            </WidgetMonth>\n          )}\n          <WidgetValue fontSize={14}>{`${\n            Math.round(monthlyEntry.totalPrice * 100) / 100\n          } $`}</WidgetValue>\n          {!isFirstMonth && (\n            <WidgetValue title={tooltipValue} fontSize={12}>\n              {formattedDifferenceToPreviousMonth}\n              <Arrow\n                isMoreExpensiveThanPreviousMonth={\n                  isMoreExpensiveThanPreviousMonth\n                }\n              >\n                {arrowSymbol}\n              </Arrow>\n            </WidgetValue>\n          )}\n        </WidgetDescription>\n        <ResponsiveContainer width=\"55%\" height={50}>\n          <LineChart\n            data={entriesGroupedPerDay}\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            //@ts-ignore\n            cursor=\"pointer\"\n          >\n            <YAxis hide={true} domain={[0, maxValueOfYAxis]} />\n            <Line\n              type=\"monotone\"\n              dataKey=\"totalPrice\"\n              stroke={isMoreExpensiveThanPreviousMonth ? \"#DC052D\" : \"#75F0C7\"}\n              strokeWidth={3}\n              dot={false}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </StyledWidget>\n    </GridItem>\n  );\n};\n","import React from \"react\";\nimport { UsageReportEntry } from \"../../util/csv-reader\";\nimport { MonthlyWidget } from \"../monthly-widget/monthly-widget\";\nimport {\n  getMaximumTotalPriceOfAllDays,\n  groupEntriesPerMonth,\n} from \"../../util/group-entries\";\nimport styled from \"styled-components\";\nimport { Grid, GridItem } from \"../grid/grid\";\n\ninterface MonthlyWidgetProps {\n  csvData: UsageReportEntry[];\n}\n\nlet totalPriceOfPreviousMonth = 0;\n\nconst StyledContainer = styled(Grid)`\n  margin-top: 40px;\n`;\n\nexport const MonthlyWidgetContainer = ({\n  csvData,\n}: MonthlyWidgetProps): JSX.Element => {\n  const maxValueOfYAxis = getMaximumTotalPriceOfAllDays(csvData);\n  const entriesGroupedPerMonth = groupEntriesPerMonth(csvData);\n\n  return (\n    <GridItem>\n      <StyledContainer>\n        {entriesGroupedPerMonth.map((monthlyEntry, index) => {\n          let isMoreExpensiveThanPreviousMonth = true;\n          const isFirstMonth = index == 0;\n          const isLastMonth = index == entriesGroupedPerMonth.length - 1;\n          if (\n            index === 0 ||\n            totalPriceOfPreviousMonth > monthlyEntry.totalPrice\n          ) {\n            isMoreExpensiveThanPreviousMonth = false;\n          }\n\n          const differenceToPreviousMonth =\n            index === 0\n              ? 0\n              : monthlyEntry.totalPrice - totalPriceOfPreviousMonth;\n          totalPriceOfPreviousMonth = monthlyEntry.totalPrice;\n\n          return (\n            <MonthlyWidget\n              key={monthlyEntry.month}\n              monthlyEntry={monthlyEntry}\n              maxValueOfYAxis={maxValueOfYAxis}\n              isMoreExpensiveThanPreviousMonth={\n                isMoreExpensiveThanPreviousMonth\n              }\n              differenceToPreviousMonth={differenceToPreviousMonth}\n              isFirstMonth={isFirstMonth}\n              isLastMonth={isLastMonth}\n            />\n          );\n        })}\n      </StyledContainer>\n    </GridItem>\n  );\n};\n","import { Tooltip } from \"recharts\";\nimport { CSSProperties } from \"react\";\nimport { UsageReportDay, UsageReportWeek } from \"../../util/group-entries\";\n\nexport interface BillingChartProps {\n  groupedBy: \"daily\" | \"weekly\";\n  maxValueOfYAxis: number;\n  repositoryNames: string[];\n  entriesGroupedPerDay: UsageReportDay[];\n  entriesGroupedPerWeek: UsageReportWeek[];\n}\n\n//Setting the generics for Tooltip\nexport class CustomTooltip extends Tooltip<number, string> {}\n\nexport const tooltipLabelStyle: CSSProperties = {\n  color: \"black\",\n  fontStyle: \"normal\",\n  fontWeight: \"normal\",\n  fontSize: \"12px\",\n  lineHeight: \"13px\",\n  marginBottom: \"10px\",\n};\n\nexport const tooltipItemStyle: CSSProperties = {\n  fontStyle: \"normal\",\n  fontWeight: \"normal\",\n  fontSize: \"12px\",\n  lineHeight: \"13px\",\n  marginBottom: \"4px\",\n  padding: 0,\n};\n\nexport const tooltipContentStyle: CSSProperties = {\n  borderRadius: \"4px\",\n  borderBlockColor: \"white\",\n  padding: \"12px\",\n};\n\nexport const colors = [\n  \"#233666\",\n  \"#96ADEA\",\n  \"#4F79E6\",\n  \"#414C66\",\n  \"#3D5EB3\",\n  \"#233666\",\n  \"#96ADEA\",\n  \"#4F79E6\",\n  \"#414C66\",\n  \"#3D5EB3\",\n];\n","import { lightFormat } from \"date-fns\";\nimport { UsageReportEntry } from \"./csv-reader\";\n\nexport const getPeriodOfTimeString = (csvData: UsageReportEntry[]): string => {\n  return `${lightFormat(\n    new Date(csvData[0].date),\n    \"dd.MM.yyyy\"\n  )} bis ${lightFormat(\n    new Date(csvData[csvData.length - 1].date),\n    \"dd.MM.yyyy\"\n  )}`;\n};\n\nexport const isStringDateValue = (possibleDateValue: string): boolean => {\n  return !!Date.parse(possibleDateValue);\n};\n","import React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { getPriceByRepositoryName } from \"../../util/group-entries\";\nimport { lightFormat } from \"date-fns\";\nimport {\n  BillingChartProps,\n  colors,\n  CustomTooltip,\n  tooltipContentStyle,\n  tooltipItemStyle,\n  tooltipLabelStyle,\n} from \"./billing-chart-components\";\nimport { isStringDateValue } from \"../../util/date-util\";\n\nexport const BillingBarChart = ({\n  groupedBy,\n  maxValueOfYAxis,\n  repositoryNames,\n  entriesGroupedPerDay,\n  entriesGroupedPerWeek,\n}: BillingChartProps): JSX.Element => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={600}>\n      <BarChart\n        data={\n          groupedBy === \"daily\" ? entriesGroupedPerDay : entriesGroupedPerWeek\n        }\n      >\n        <CartesianGrid vertical={false} stroke={\"rgba(255, 255, 255, 0.1)\"} />\n        <XAxis\n          dataKey={groupedBy === \"daily\" ? \"day\" : \"week\"}\n          axisLine={false}\n          tickLine={false}\n          tick={{ fill: \"white\" }}\n          tickFormatter={(tick) =>\n            isStringDateValue(tick)\n              ? lightFormat(new Date(tick), \"dd.MM.\")\n              : tick\n          }\n          minTickGap={10}\n        />\n        <YAxis\n          domain={[0, maxValueOfYAxis]}\n          unit=\" $\"\n          tickCount={maxValueOfYAxis + 1}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n\n        <CustomTooltip\n          labelFormatter={(label) =>\n            isStringDateValue(label)\n              ? lightFormat(new Date(label), \"dd.MM.\")\n              : label\n          }\n          itemSorter={(repositoryGroupedByDay) =>\n            repositoryGroupedByDay.value ? repositoryGroupedByDay.value * -1 : 0\n          }\n          labelStyle={tooltipLabelStyle}\n          itemStyle={tooltipItemStyle}\n          contentStyle={tooltipContentStyle}\n          cursor={{ fill: \"rgba(122, 143, 204, 0.3)\" }}\n        />\n        <Legend />\n        {repositoryNames.map((repositoryName, index) => {\n          return (\n            <Bar\n              dataKey={(currentEntry) =>\n                getPriceByRepositoryName(repositoryName, currentEntry.entries)\n              }\n              stackId=\"a\"\n              fill={colors[index]}\n              key={index}\n              name={repositoryName}\n              unit={\"$\"}\n            />\n          );\n        })}\n      </BarChart>\n    </ResponsiveContainer>\n  );\n};\n","import React from \"react\";\nimport {\n  BillingChartProps,\n  colors,\n  CustomTooltip,\n  tooltipContentStyle,\n  tooltipItemStyle,\n  tooltipLabelStyle,\n} from \"./billing-chart-components\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Legend,\n  ResponsiveContainer,\n  CartesianGrid,\n} from \"recharts\";\nimport { getPriceByRepositoryName } from \"../../util/group-entries\";\nimport { lightFormat } from \"date-fns\";\nimport { isStringDateValue } from \"../../util/date-util\";\n\nexport const BillingLineChart = ({\n  groupedBy,\n  maxValueOfYAxis,\n  repositoryNames,\n  entriesGroupedPerDay,\n  entriesGroupedPerWeek,\n}: BillingChartProps): JSX.Element => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={600}>\n      <LineChart\n        data={\n          groupedBy === \"daily\" ? entriesGroupedPerDay : entriesGroupedPerWeek\n        }\n      >\n        <CartesianGrid stroke={\"rgba(255, 255, 255, 0.1)\"} />\n        <XAxis\n          dataKey={groupedBy === \"daily\" ? \"day\" : \"week\"}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(tick) =>\n            isStringDateValue(tick)\n              ? lightFormat(new Date(tick), \"dd.MM.\")\n              : tick\n          }\n          minTickGap={10}\n        />\n        <YAxis\n          domain={[0, maxValueOfYAxis]}\n          unit=\" $\"\n          tickCount={maxValueOfYAxis + 1}\n          tick={{ fill: \"white\" }}\n          axisLine={false}\n          tickLine={false}\n        />\n\n        <CustomTooltip\n          labelFormatter={(label) =>\n            isStringDateValue(label)\n              ? lightFormat(new Date(label), \"dd.MM.\")\n              : label\n          }\n          itemSorter={(repositoryGroupedByDay) =>\n            repositoryGroupedByDay.value ? repositoryGroupedByDay.value * -1 : 0\n          }\n          labelStyle={tooltipLabelStyle}\n          itemStyle={tooltipItemStyle}\n          contentStyle={tooltipContentStyle}\n        />\n        <Legend />\n        {repositoryNames.map((repositoryName, index) => {\n          return (\n            <Line\n              type=\"monotone\"\n              stroke={colors[index]}\n              dataKey={(currentEntry) =>\n                getPriceByRepositoryName(repositoryName, currentEntry.entries)\n              }\n              key={index}\n              name={repositoryName}\n              unit={\"$\"}\n              strokeWidth={4}\n              dot={false}\n            />\n          );\n        })}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n","import React, { useContext, useState } from \"react\";\nimport { UsageReportEntry } from \"../../util/csv-reader\";\nimport { BillingBarChart } from \"../billing-chart/billing-bar-chart\";\nimport { BillingLineChart } from \"../billing-chart/billing-line-chart\";\nimport { WidgetContext } from \"../context/widget-context\";\nimport {\n  getMaximumTotalPriceOfAllDays,\n  getMaximumTotalPriceOfAllWeeks,\n  groupEntriesPerDay,\n  groupEntriesPerWeek,\n} from \"../../util/group-entries\";\nimport { getPeriodOfTimeString } from \"../../util/date-util\";\nimport styled from \"styled-components\";\nimport { GridItem } from \"../grid/grid\";\n\ninterface ChartContainerProps {\n  csvData: UsageReportEntry[];\n}\n\nconst ChartDiv = styled.div`\n  background: linear-gradient(\n    180deg,\n    rgba(122, 143, 204, 0) 0%,\n    rgba(122, 143, 204, 0.3) 100%\n  );\n  border-radius: 4px;\n  margin-top: 24px;\n  margin-bottom: 437px;\n  padding-right: 24px;\n`;\n\nconst ButtonDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 40px;\n`;\n\nconst Button = styled.button`\n  background: ${(props: { isActive: boolean }) =>\n    props.isActive ? \"#668cff\" : \"rgba(255, 255, 255, 0.1)\"};\n  border: none;\n  cursor: pointer;\n  padding: 4px 8px;\n  color: white;\n`;\n\nconst LeftToggleButton = styled(Button)`\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n`;\n\nconst RightToggleButton = styled(Button)`\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n`;\n\nconst ChartHeadline = styled.h2`\n  font-style: normal;\n  font-weight: bold;\n  font-size: 32px;\n  line-height: 42px;\n  margin-top: 80px;\n`;\n\nconst ChartDescription = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  line-height: 21px;\n  margin-top: 16px;\n`;\n\nexport const ChartContainer = ({\n  csvData,\n}: ChartContainerProps): JSX.Element => {\n  const [diagramType, setDiagramType] = useState<\"Bar\" | \"Line\">(\"Bar\");\n  const [groupedBy, setGroupedBy] = useState<\"daily\" | \"weekly\">(\"daily\");\n\n  // Selected month from mini-widgets\n  const { activeMonth } = useContext(WidgetContext);\n\n  const maxDailyValueOfYAxis = getMaximumTotalPriceOfAllDays(csvData);\n  const maxWeeklyValueOfYAxis = getMaximumTotalPriceOfAllWeeks(csvData);\n  const currentMaxValueOfYAxis =\n    groupedBy === \"daily\" ? maxDailyValueOfYAxis : maxWeeklyValueOfYAxis;\n\n  //currentData changes when a mini-widget is selected\n  const isDataFromWidget = !(activeMonth.monthName === \"\");\n  const currentData = isDataFromWidget ? activeMonth.data : csvData;\n\n  const entriesGroupedPerDay = groupEntriesPerDay(currentData);\n  const entriesGroupedPerWeek = groupEntriesPerWeek(\n    currentData,\n    isDataFromWidget\n  );\n\n  const repositoryNames = (): string[] => {\n    const repositoryNamesWithDuplicates = csvData.map(\n      (entry) => entry.repositorySlug\n    );\n    return repositoryNamesWithDuplicates.filter(\n      (value, index) => repositoryNamesWithDuplicates.indexOf(value) === index\n    );\n  };\n\n  return (\n    <>\n      <GridItem>\n        <ChartHeadline>Angezeigter Zeitraum</ChartHeadline>\n        <ChartDescription>\n          {activeMonth.monthName || getPeriodOfTimeString(csvData)}\n        </ChartDescription>\n        <ButtonDiv>\n          <div>\n            <LeftToggleButton\n              isActive={groupedBy === \"daily\"}\n              onClick={() => setGroupedBy(\"daily\")}\n            >\n              Daily\n            </LeftToggleButton>\n            <RightToggleButton\n              isActive={groupedBy === \"weekly\"}\n              onClick={() => setGroupedBy(\"weekly\")}\n            >\n              Weekly\n            </RightToggleButton>\n          </div>\n\n          <div>\n            <LeftToggleButton\n              isActive={diagramType === \"Bar\"}\n              onClick={() => setDiagramType(\"Bar\")}\n            >\n              Bar\n            </LeftToggleButton>\n            <RightToggleButton\n              isActive={diagramType === \"Line\"}\n              onClick={() => setDiagramType(\"Line\")}\n            >\n              Line\n            </RightToggleButton>\n          </div>\n        </ButtonDiv>\n        <ChartDiv>\n          {diagramType === \"Bar\" ? (\n            <BillingBarChart\n              maxValueOfYAxis={currentMaxValueOfYAxis}\n              groupedBy={groupedBy}\n              repositoryNames={repositoryNames()}\n              entriesGroupedPerDay={entriesGroupedPerDay}\n              entriesGroupedPerWeek={entriesGroupedPerWeek}\n            />\n          ) : (\n            <BillingLineChart\n              maxValueOfYAxis={currentMaxValueOfYAxis}\n              groupedBy={groupedBy}\n              repositoryNames={repositoryNames()}\n              entriesGroupedPerDay={entriesGroupedPerDay}\n              entriesGroupedPerWeek={entriesGroupedPerWeek}\n            />\n          )}\n        </ChartDiv>\n      </GridItem>\n    </>\n  );\n};\n","import React from \"react\";\nimport { MonthlyWidgetContainer } from \"../components/monthly-widget-container/monthly-widget-container\";\nimport { ChartContainer } from \"../components/chart-container/chart-container\";\nimport { UsageReportEntry } from \"../util/csv-reader\";\nimport styled from \"styled-components\";\nimport { GridItem } from \"../components/grid/grid\";\n\ninterface RunningApplicationProps {\n  csvData: UsageReportEntry[];\n}\n\nconst ApplicationDescription = styled.p`\n  font-style: normal;\n  font-weight: normal;\n  font-size: 16px;\n  line-height: 24px;\n  grid-column: 1/9;\n  margin: 40px 0 0 0;\n`;\n\nexport const DashboardPage = ({\n  csvData,\n}: RunningApplicationProps): JSX.Element => {\n  return (\n    <>\n      <GridItem md={7}>\n        <ApplicationDescription>\n          Kuzre Einführungstext Integer posuere erat a ante venenatis dapibus\n          posuere velit aliquet. Morbi leo risus, porta ac consectetur ac,\n          vestibulum at eros. Maecenas sed diam eget risus varius blandit sit\n          amet non magna.\n        </ApplicationDescription>\n      </GridItem>\n      {csvData && <MonthlyWidgetContainer csvData={csvData} />}\n      {csvData && <ChartContainer csvData={csvData} />}\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { getCsvFile, UsageReportEntry } from \"./util/csv-reader\";\nimport { WidgetContext } from \"./components/context/widget-context\";\nimport { Headline } from \"./components/headline/headline\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { HomePage } from \"./pages/home-page\";\nimport { DashboardPage } from \"./pages/dashboard-page\";\nimport { Grid } from \"./components/grid/grid\";\nimport styled from \"styled-components\";\n\nconst MainContent = styled(Grid)`\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 0 24px;\n`;\n\nconst App = (): JSX.Element => {\n  const [csvData, setCsvData] = useState<UsageReportEntry[] | null>(null);\n  const [selectedMonthFromWidget, setSelectedMonthFromWidget] = useState<{\n    monthName: string;\n    data: UsageReportEntry[];\n  }>({ monthName: \"\", data: [] });\n\n  const handleInput = (file: File) => {\n    getCsvFile(file).then((res) => {\n      setCsvData(res);\n    });\n  };\n\n  const handleWidgetClick = (month: string, data: UsageReportEntry[]) => {\n    if (month === selectedMonthFromWidget.monthName) {\n      setSelectedMonthFromWidget({ monthName: \"\", data: [] });\n    } else {\n      setSelectedMonthFromWidget({ monthName: month, data: data });\n    }\n  };\n\n  return (\n    <Router>\n      <MainContent>\n        <WidgetContext.Provider\n          value={{\n            activeMonth: selectedMonthFromWidget,\n            setActiveMonth: (month: string, data: UsageReportEntry[]) =>\n              handleWidgetClick(month, data),\n          }}\n        >\n          <Headline />\n          <Switch>\n            <Route path=\"/github-billing-dashboard\">\n              <HomePage handleInput={handleInput} />\n            </Route>\n            <Route path=\"/dashboard-page\">\n              {csvData && <DashboardPage csvData={csvData} />}\n            </Route>\n          </Switch>\n        </WidgetContext.Provider>\n      </MainContent>\n    </Router>\n  );\n};\n\nexport default App;\n","import { parse } from \"papaparse\";\n\nexport interface UsageReportCsvEntry {\n  date: string;\n  product: string;\n  repositorySlug: string;\n  quantity: string;\n  unitType: string;\n  pricePerUnit: string;\n  actionsWorkflow: string;\n  notes: string;\n}\n\nexport interface UsageReportEntry extends UsageReportCsvEntry {\n  totalPrice: number;\n}\n\nconst camalize = (str: string): string => {\n  return str\n    .toLowerCase()\n    .replace(/[^a-zA-Z0-0]+(.)/g, (m, chr) => chr.toUpperCase());\n};\nexport const getCsvFile = (file: File): Promise<UsageReportEntry[]> => {\n  return new Promise((resolve) => {\n    parse<UsageReportCsvEntry>(file, {\n      header: true,\n      skipEmptyLines: true,\n      transformHeader: (header: string): string => {\n        return camalize(header);\n      },\n      complete: (result) => {\n        const githubBillingEntries: UsageReportEntry[] = result.data.map(\n          (dailyEntry) => {\n            // remove dollar sign\n            const price = dailyEntry.pricePerUnit.substring(1);\n            return {\n              ...dailyEntry,\n              totalPrice: parseFloat(dailyEntry.quantity) * parseFloat(price),\n            };\n          }\n        );\n        resolve(githubBillingEntries);\n      },\n    });\n  });\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GlobalStyles } from \"./global-styles\";\nimport App from \"./App\";\nimport \"./fonts/Coco-Gothic-Regular-TTF.ttf\";\n\nReactDOM.render(\n  <>\n    <GlobalStyles />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}