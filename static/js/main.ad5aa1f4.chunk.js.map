{"version":3,"sources":["components/file-input.tsx","group-entries.ts","components/billing-bar-chart.tsx","components/billing-line-chart.tsx","components/widget-context.tsx","components/chart-container.tsx","components/monthly-widget.tsx","components/monthly-widget-container.tsx","App.tsx","csv-reader.ts","index.tsx"],"names":["FileInput","onSubmit","fileInput","useRef","className","event","preventDefault","current","files","type","ref","groupEntriesPerDay","csvData","reduce","acc","obj","indexOfEntryForCurrentDate","currentDate","Date","date","toISOString","find","objectsInAcc","index","day","entries","push","totalPrice","newEntry","groupEntriesPerWeek","currentFirstDayOfTheWeek","startOfWeek","from","firstDayOfTheWeek","lastDayOfTheWeek","lastDayOfWeek","week","lightFormat","to","weekNumber","getISOWeek","getPriceByRepositoryName","repositoryName","currentEntries","priceByRepositoryName","forEach","entry","repositorySlug","Math","round","getMaximumTotalPriceOfAllDays","data","entriesGroupedPerDay","ceil","max","apply","map","BillingBarChart","groupedBy","maxValueOfYAxis","entriesGroupedPerWeek","repositoryNames","Set","colors","BarChart","width","height","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","tick","parse","interval","YAxis","domain","unit","Tooltip","labelFormatter","label","Legend","Bar","currentEntry","stackId","fill","name","BillingLineChart","LineChart","margin","top","right","left","bottom","Line","stroke","strokeWidth","dot","WidgetContext","createContext","activeMonth","monthName","setActiveMonth","month","ChartContainer","useState","diagramType","setDiagramType","setGroupedBy","useContext","maxDailyValueOfYAxis","maxWeeklyValueOfYAxis","getMaximumTotalPriceOfAllWeeks","currentMaxValueOfYAxis","currentData","length","onClick","MonthlyWidget","monthlyEntry","hide","MonthlyWidgetContainer","entriesGroupedPerMonth","currentStartOfMonth","startOfMonth","firstDayOfMonth","lastDayOfTheMonth","lastDayOfMonth","format","getYear","getMonth","groupEntriesPerMonth","style","display","App","setCsvData","selectedMonthFromWidget","setSelectedMonthFromWidget","Provider","value","handleWidgetClick","file","Promise","resolve","reject","header","skipEmptyLines","transformHeader","toLowerCase","replace","m","chr","toUpperCase","complete","result","githubBillingEntries","dailyEntry","price","pricePerUnit","substring","parseFloat","quantity","getCsvFile","then","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad5aa1f4.chunk.js","sourcesContent":["import React, {useRef} from \"react\";\n\ninterface FileInputProp {\n    onSubmit:  (file: File) => void\n}\n\nexport const FileInput = ({onSubmit}: FileInputProp): JSX.Element => {\n\n    const fileInput = useRef<HTMLInputElement>(null);\n    const handleSubmit= (event: React.FormEvent) => {\n        event.preventDefault()\n\n        if(fileInput && fileInput.current && fileInput.current.files ) {\n            onSubmit(fileInput.current.files[0])\n        }\n    }\n\n    return (\n        <div className=\"file-uploader\">\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Upload file:\n                    <input type=\"file\" ref={fileInput} />\n                </label>\n                <br />\n                <button type=\"submit\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\n","import {UsageReportEntry} from \"./csv-reader\";\nimport {\n    getISOWeek,\n    lastDayOfWeek,\n    lightFormat,\n    startOfWeek,\n    format,\n    getMonth,\n    lastDayOfMonth,\n    startOfMonth,\n    getYear\n} from 'date-fns'\n\ninterface UsageReportDay {\n    day: string; // iso date\n    totalPrice: number; // for the charts total value\n    entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerDay = (csvData: UsageReportEntry[]): UsageReportDay[] => {\n    return csvData.reduce((acc: UsageReportDay[], obj) => {\n        let indexOfEntryForCurrentDate: number = 0;\n        const currentDate = new Date(obj.date).toISOString()\n\n        //Is the current date already in acc?\n        if (!(acc.find((objectsInAcc: UsageReportDay, index) => {\n            indexOfEntryForCurrentDate = index\n            return objectsInAcc.day === currentDate\n        }))) {\n            const newEntry: UsageReportDay = {\n                day: currentDate,\n                totalPrice: obj.totalPrice,\n                entries: [obj]\n            }\n            acc.push(newEntry)\n        }else {\n            acc[indexOfEntryForCurrentDate].entries.push(obj)\n            acc[indexOfEntryForCurrentDate].totalPrice = acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice\n        }\n        return acc;\n    }, []);\n}\n\n\n\ninterface UsageReportWeek {\n    week: string; // a.e.: \"12.5. - 19.5.\"\n    from: string; // iso date\n    to: string; // iso date\n    weekNumber: number;\n    totalPrice: number; // for the charts total value\n    entries: UsageReportEntry[];\n}\n\nexport const groupEntriesPerWeek = (csvData: UsageReportEntry[]): UsageReportWeek[] => {\n    return csvData.reduce((acc: UsageReportWeek[], obj) => {\n        let indexOfEntryForCurrentDate: number = 0;\n        const currentDate = new Date(obj.date)\n        const currentFirstDayOfTheWeek = startOfWeek(currentDate)\n\n        //Is the current date already in acc?\n        if (!(acc.find((objectsInAcc: UsageReportWeek, index) => {\n            indexOfEntryForCurrentDate = index\n            return objectsInAcc.from === currentFirstDayOfTheWeek.toISOString()\n        }))) {\n            const firstDayOfTheWeek = startOfWeek(currentDate)\n            const lastDayOfTheWeek = lastDayOfWeek(currentDate)\n\n            const newEntry: UsageReportWeek = {\n                //TODO from, to und week enthalten in der widget Ansicht Daten, die gar nicht angezeigt werden\n                week: `${lightFormat(firstDayOfTheWeek, 'dd.MM.')} - ${lightFormat(lastDayOfTheWeek, 'dd.MM.')}`,\n                from: firstDayOfTheWeek.toISOString(),\n                to: lastDayOfTheWeek.toISOString(),\n                weekNumber: getISOWeek(currentDate),\n                totalPrice: obj.totalPrice,\n                entries: [obj]\n            }\n            acc.push(newEntry)\n        }else {\n            acc[indexOfEntryForCurrentDate].entries.push(obj)\n            acc[indexOfEntryForCurrentDate].totalPrice = acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice\n        }\n        return acc;\n    }, []);\n}\n\nexport interface UsageReportMonth{\n    monthName: string; // a.e.: \"April 2020\"\n    month: number; // a.e. 4\n    from: string; // iso date\n    to: string; // iso date\n    totalPrice: number; // for the charts total value\n    entries: UsageReportEntry[];\n}\n\n\nexport const groupEntriesPerMonth = (csvData: UsageReportEntry[]): UsageReportMonth[] => {\n\n    return csvData.reduce((acc: UsageReportMonth[], obj) => {\n        let indexOfEntryForCurrentDate: number = 0;\n        const currentDate = new Date(obj.date)\n        const currentStartOfMonth = startOfMonth(currentDate).toISOString()\n\n        //Is the current date already in acc?\n        if (!(acc.find((objectsInAcc: UsageReportMonth, index) => {\n            indexOfEntryForCurrentDate = index\n            return objectsInAcc.from === currentStartOfMonth\n        }))) {\n            const firstDayOfMonth = startOfMonth(currentDate)\n            const lastDayOfTheMonth = lastDayOfMonth(currentDate)\n\n            const newEntry: UsageReportMonth = {\n                monthName: `${format(currentDate, 'LLLL')} ${getYear(currentDate)}`,\n                month: getMonth(currentDate) + 1,\n                from: firstDayOfMonth.toISOString(),\n                to: lastDayOfTheMonth.toISOString(),\n                totalPrice: obj.totalPrice,\n                entries: [obj]\n            }\n\n            acc.push(newEntry)\n        }else {\n            acc[indexOfEntryForCurrentDate].entries.push(obj)\n            acc[indexOfEntryForCurrentDate].totalPrice = acc[indexOfEntryForCurrentDate].totalPrice + obj.totalPrice\n        }\n        return acc;\n    }, []);\n}\n\n\nexport const getPriceByRepositoryName = (repositoryName: string, currentEntries: UsageReportEntry[]) => {\n    let priceByRepositoryName = 0\n    currentEntries.forEach((entry) => {\n        if(entry.repositorySlug === repositoryName){\n            priceByRepositoryName += entry.totalPrice\n        }\n    })\n    return Math.round(priceByRepositoryName * 100) / 100\n}\n\nexport const getMaximumTotalPriceOfAllDays = (data: UsageReportEntry[]) => {\n    const entriesGroupedPerDay = groupEntriesPerDay(data)\n    return Math.ceil(Math.max.apply(Math, entriesGroupedPerDay.map((entry) => entry.totalPrice)))\n}\n\nexport const getMaximumTotalPriceOfAllWeeks = (data: UsageReportEntry[]) => {\n    const entriesGroupedPerWeek = groupEntriesPerWeek(data)\n    return Math.ceil(Math.max.apply(Math, entriesGroupedPerWeek.map((entry) => entry.totalPrice)))\n}","import React from \"react\";\nimport {UsageReportEntry} from \"../csv-reader\";\nimport {BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\nimport {groupEntriesPerDay, groupEntriesPerWeek, getPriceByRepositoryName} from \"../group-entries\";\nimport {lightFormat} from \"date-fns\";\nimport 'react-dropdown/style.css';\n\ninterface BillingChartProps {\n    csvData: UsageReportEntry[],\n    groupedBy: (\"daily\" | \"weekly\"),\n    maxValueOfYAxis: number\n}\n\nexport const BillingBarChart = ({csvData, groupedBy, maxValueOfYAxis}: BillingChartProps): JSX.Element => {\n    const entriesGroupedPerDay = groupEntriesPerDay(csvData)\n    const entriesGroupedPerWeek = groupEntriesPerWeek(csvData)\n\n    // @ts-ignore\n    const repositoryNames = [...new Set(csvData.map((entry) => entry.repositorySlug))]\n    const colors = [\"#233666\", \"#96ADEA\", \"#4F79E6\", \"#414C66\", \"#3D5EB3\", \"#233666\", \"#96ADEA\", \"#4F79E6\", \"#414C66\", \"#3D5EB3\"]\n\n\n    return (\n        <>\n            <BarChart width={1000} height={600} data={(groupedBy === \"daily\")? entriesGroupedPerDay : entriesGroupedPerWeek}>\n                <CartesianGrid strokeDasharray=\"2 2\"/>\n                <XAxis dataKey={(groupedBy === \"daily\")? \"day\" : \"week\"} tickFormatter={(tick) => Date.parse(tick) ? lightFormat(new Date(tick), \"dd.MM.\") : tick} interval=\"preserveStart\" />\n                <YAxis domain={[0, maxValueOfYAxis]} unit=\" $\"/>\n               {/*labelFormatter checks if the given label has the right format*/}\n                <Tooltip labelFormatter={(label) => Date.parse(label) ? lightFormat(new Date(label), \"dd.MM.\") : label} />\n                <Legend/>\n                {repositoryNames.map(((repositoryName, index) => {\n                    return <Bar\n                        dataKey={(currentEntry) => getPriceByRepositoryName(repositoryName, currentEntry.entries) }\n                        stackId=\"a\" fill={colors[index]}\n                        key={index}\n                        name={repositoryName}\n                        unit={\"$\"}\n                    />\n                }))}\n\n            </BarChart>\n        </>\n    )\n}\n","import React from \"react\";\nimport {UsageReportEntry} from \"../csv-reader\";\nimport {LineChart, Line, XAxis, YAxis, Tooltip, Legend} from 'recharts';\nimport {\n    groupEntriesPerDay,\n    groupEntriesPerWeek,\n    getPriceByRepositoryName\n} from \"../group-entries\";\nimport 'react-dropdown/style.css';\nimport {lightFormat} from \"date-fns\";\n\ninterface TestLineChartProps {\n    csvData: UsageReportEntry[],\n    groupedBy: (\"daily\" | \"weekly\"),\n    maxValueOfYAxis: number\n}\n\n\nexport const BillingLineChart = ({csvData, groupedBy, maxValueOfYAxis}: TestLineChartProps): JSX.Element => {\n\n    const entriesGroupedPerDay = groupEntriesPerDay(csvData)\n    const entriesGroupedPerWeek = groupEntriesPerWeek(csvData)\n\n    // @ts-ignore\n    const repositoryNames = [...new Set(csvData.map((entry) => entry.repositorySlug))]\n    const colors = [\"#233666\", \"#96ADEA\", \"#4F79E6\", \"#414C66\", \"#3D5EB3\", \"#233666\", \"#96ADEA\", \"#4F79E6\", \"#414C66\", \"#3D5EB3\"]\n\n\n    return (\n        <>\n            <LineChart\n                width={1000}\n                height={600}\n                data={(groupedBy === \"daily\")? entriesGroupedPerDay : entriesGroupedPerWeek}\n                margin={{\n                    top: 5,\n                    right: 30,\n                    left: 20,\n                    bottom: 5,\n                }}\n            >\n\n                <XAxis dataKey={(groupedBy === \"daily\")? \"day\" : \"week\"} tickFormatter={(tick) => Date.parse(tick) ? lightFormat(new Date(tick), \"dd.MM.\") : tick} interval=\"preserveStart\"/>\n                <YAxis domain={[0, maxValueOfYAxis]} unit=\" $\"/>\n                {/*labelFormatter checks if the given label has the right format*/}\n                <Tooltip labelFormatter={(label) => Date.parse(label) ? lightFormat(new Date(label), \"dd.MM.\") : label}/>\n                <Legend/>\n                {repositoryNames.map((repositoryName, index) => {\n                    return <Line\n                        type=\"monotone\"\n                        stroke={colors[index]}\n                        dataKey={(currentEntry) => getPriceByRepositoryName(repositoryName, currentEntry.entries)}\n                        key={index}\n                        name={repositoryName}\n                        unit={\"$\"}\n                        strokeWidth={4}\n                        dot={false}\n                    />\n                })}\n            </LineChart>\n        </>\n    )\n}\n\n","import {createContext} from \"react\";\nimport {UsageReportEntry} from \"../csv-reader\";\n\ninterface WidgetContextType {\n    activeMonth: {monthName:string; data: UsageReportEntry[]};\n    setActiveMonth: (month: string, data: UsageReportEntry[]) => void\n}\n\nexport const WidgetContext = createContext<WidgetContextType>({\n    activeMonth: {monthName: \"\", data: []},\n    setActiveMonth: (month: string, data: UsageReportEntry[]) => {}\n})\n\n","import React, {useContext, useState} from \"react\";\nimport {UsageReportEntry} from \"../csv-reader\";\nimport {BillingBarChart} from \"./billing-bar-chart\";\nimport {BillingLineChart} from \"./billing-line-chart\";\nimport \"./chart-container.css\"\nimport {WidgetContext} from \"./widget-context\";\nimport {getMaximumTotalPriceOfAllDays, getMaximumTotalPriceOfAllWeeks} from \"../group-entries\";\n\ninterface ChartContainerProps {\n    csvData: UsageReportEntry[]\n}\n\nexport const ChartContainer = ({csvData}: ChartContainerProps): JSX.Element => {\n    const [diagramType, setDiagramType] = useState<\"Bar\" | \"Line\">(\"Bar\")\n    const [groupedBy, setGroupedBy] = useState<\"daily\" | \"weekly\">(\"daily\")\n\n    // Selected month from mini-widgets\n    const {activeMonth} = useContext(WidgetContext)\n\n    const maxDailyValueOfYAxis = getMaximumTotalPriceOfAllDays(csvData)\n    const maxWeeklyValueOfYAxis = getMaximumTotalPriceOfAllWeeks(csvData)\n    const currentMaxValueOfYAxis = groupedBy === \"daily\" ? maxDailyValueOfYAxis : maxWeeklyValueOfYAxis\n    //currentData changes when a mini-widget is selected\n    const currentData = activeMonth.monthName === \"\" ? csvData : activeMonth.data\n\n    return (\n        <>\n            <h2>Angezeigter Zeitraum</h2>\n            <p>{activeMonth.monthName || `${csvData[0].date} bis ${csvData[csvData.length - 1].date} (kompletter Datensatz)`}</p>\n            <div className={\"toggle-button-div\"}>\n                <div>\n                    <button\n                        className={`toggle-button left-toggle-button ${groupedBy === \"daily\" ? \"selected-button\" : null}`}\n                        onClick={() => setGroupedBy(\"daily\")}>\n                        Daily\n                    </button>\n                    <button\n                        className={`toggle-button right-toggle-button ${groupedBy === \"weekly\" ? \"selected-button\" : null}`}\n                        onClick={() => setGroupedBy(\"weekly\")}>\n                        Weekly\n                    </button>\n                </div>\n\n                <div>\n                    <button className={`toggle-button left-toggle-button ${diagramType === \"Bar\" ? \"selected-button\" : null}`}\n                            onClick={() => setDiagramType(\"Bar\")}>\n                        Bar\n                    </button>\n                    <button className={`toggle-button right-toggle-button ${diagramType === \"Line\" ? \"selected-button\" : null}`}\n                            onClick={() => setDiagramType(\"Line\")}>\n                        Line\n                    </button>\n                </div>\n            </div>\n            {diagramType === \"Bar\" ? <BillingBarChart maxValueOfYAxis={currentMaxValueOfYAxis} csvData={currentData} groupedBy={groupedBy}/> :\n                <BillingLineChart maxValueOfYAxis={currentMaxValueOfYAxis} csvData={currentData} groupedBy={groupedBy}/>}\n        </>\n    )\n}\n\n","import React, {useContext} from \"react\";\nimport {UsageReportMonth} from \"../group-entries\";\nimport {LineChart, Line, YAxis} from 'recharts';\nimport {groupEntriesPerDay} from \"../group-entries\";\nimport {WidgetContext} from \"./widget-context\";\nimport \"./monthly-widget.css\"\n\ninterface MonthlyWidgetProps {\n    monthlyEntry: UsageReportMonth;\n    maxValueOfYAxis: number\n}\n\nexport const MonthlyWidget = ({monthlyEntry, maxValueOfYAxis}: MonthlyWidgetProps): JSX.Element => {\n    const {activeMonth, setActiveMonth} = useContext(WidgetContext)\n    const entriesGroupedPerDay = groupEntriesPerDay(monthlyEntry.entries)\n\n    return (\n        <div className={\"monthly-widget\"  + (activeMonth.monthName === monthlyEntry.monthName ? \" monthly-widget-active\" : \"\")}\n             onClick={() => setActiveMonth(monthlyEntry.monthName, monthlyEntry.entries)}>\n            <div>\n                <h4>{monthlyEntry.monthName}</h4>\n                <p>{`${Math.round(monthlyEntry.totalPrice * 100) / 100} $`}</p>\n            </div>\n            <LineChart\n                width={100}\n                height={50}\n                data={entriesGroupedPerDay}\n                margin={{\n                    top: 5,\n                    right: 30,\n                    left: 20,\n                    bottom: 5,\n                }}\n            >\n                <YAxis hide={true} domain={[0, maxValueOfYAxis]}/>\n                <Line type=\"monotone\" dataKey=\"totalPrice\" stroke=\"#82ca9d\" dot={false}/>\n\n            </LineChart>\n        </div>\n    )\n}","import React from \"react\";\nimport {UsageReportEntry} from \"../csv-reader\";\nimport {MonthlyWidget} from \"./monthly-widget\";\nimport {getMaximumTotalPriceOfAllDays, groupEntriesPerMonth} from \"../group-entries\";\n\ninterface MonthlyWidgetProps{\n    csvData: UsageReportEntry[]\n}\n\nexport const MonthlyWidgetContainer = ({csvData}: MonthlyWidgetProps): JSX.Element => {\n    const maxValueOfYAxis = getMaximumTotalPriceOfAllDays(csvData)\n    const entriesGroupedPerMonth = groupEntriesPerMonth(csvData)\n    return(\n        <div style={{display: \"flex\"}}>\n            {entriesGroupedPerMonth.map((monthlyEntry) => <MonthlyWidget key={monthlyEntry.month} monthlyEntry={monthlyEntry} maxValueOfYAxis={maxValueOfYAxis}/>)}\n        </div>\n    )\n}\n","import React, {useState} from \"react\"\nimport {FileInput} from \"./components/file-input\"\nimport {ChartContainer} from \"./components/chart-container\";\nimport {MonthlyWidgetContainer} from \"./components/monthly-widget-container\";\nimport {getCsvFile, UsageReportEntry} from \"./csv-reader\";\nimport {WidgetContext} from \"./components/widget-context\";\n\n\nconst App = (): JSX.Element => {\n    const [csvData, setCsvData] = useState<UsageReportEntry[] | null>(null);\n\n\n    const handleFileSubmit = (file: File) => {\n        getCsvFile(file).then(res => {\n            setCsvData(res)\n        })\n\n    }\n\n\n    const handleWidgetClick = (month: string, data: UsageReportEntry[]) => {\n        if(month === selectedMonthFromWidget.monthName){\n            setSelectedMonthFromWidget({monthName: \"\", data: []})\n        }else{\n            setSelectedMonthFromWidget({monthName: month, data: data})\n        }\n    }\n    const [selectedMonthFromWidget, setSelectedMonthFromWidget] = useState<{monthName: string, data: (UsageReportEntry[])}>({monthName: \"\", data: []})\n\n\n\n    return (\n        <WidgetContext.Provider value={{activeMonth: selectedMonthFromWidget, setActiveMonth: (month:string, data: UsageReportEntry[]) => handleWidgetClick(month, data)}}>\n            <div className=\"App\" >\n                <FileInput onSubmit={handleFileSubmit}/>\n                {csvData && <MonthlyWidgetContainer csvData={csvData}/>}\n                {csvData && <ChartContainer csvData={csvData}/>}\n            </div>\n        </WidgetContext.Provider>\n    );\n}\n\nexport default App;\n","import {parse} from 'papaparse'\n\nexport interface UsageReportCsvEntry {\n    date: string,\n    product: string,\n    repositorySlug: string,\n    quantity: string,\n    unitType: string,\n    pricePerUnit: string,\n    actionsWorkflow: string,\n    notes: string,\n}\n\nexport interface UsageReportEntry extends UsageReportCsvEntry {\n    totalPrice: number\n}\n\nconst camalize = (str: string): string => {\n    return str.toLowerCase().replace(/[^a-zA-Z0-0]+(.)/g, (m, chr) => chr.toUpperCase());\n}\nexport const getCsvFile = (file: File): Promise<UsageReportEntry[]> => {\n    return new Promise((resolve, reject) => {\n\n        parse<UsageReportCsvEntry>(file, {\n            header: true,\n            skipEmptyLines: true,\n            transformHeader: (header: string): string => {\n                return camalize(header)\n            },\n            complete: (result) => {\n                const githubBillingEntries: UsageReportEntry[] = result.data.map((dailyEntry) => {\n                    // remove dollar sign\n                    const price = dailyEntry.pricePerUnit.substring(1)\n                    return {\n                        ...dailyEntry,\n                        totalPrice: (parseFloat(dailyEntry.quantity) * parseFloat(price)),\n                    }\n                });\n\n                resolve(githubBillingEntries)\n            }\n        });\n    })\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}